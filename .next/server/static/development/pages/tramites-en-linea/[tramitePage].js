module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../../../../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../next-server/lib/router-context":
/*!**************************************************************!*\
  !*** external "next/dist/next-server/lib/router-context.js" ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/router-context.js");

/***/ }),

/***/ "../next-server/lib/utils":
/*!*****************************************************!*\
  !*** external "next/dist/next-server/lib/utils.js" ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/utils.js");

/***/ }),

/***/ "./components/breadcrumb.js":
/*!**********************************!*\
  !*** ./components/breadcrumb.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\breadcrumb.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



const BreadCrumb = props => {
  const {
    0: showBreadcrumb,
    1: setShowBreadCrumb
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    let url = window.location.href,
        urlArr = url.split('/');
    setShowBreadCrumb(urlArr);
  }, []);
  return __jsx("div", {
    className: "section breadcrumb " + props.class,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "container-fluid wrapper-fluid flex middle-xs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 13
    }
  }, __jsx("i", {
    className: "icons icon-triangle-right-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 17
    }
  }), __jsx("div", {
    className: "list",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23,
      columnNumber: 17
    }
  }, showBreadcrumb[0] && showBreadcrumb[2] && __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
    href: "/",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 26,
      columnNumber: 25
    }
  }, __jsx("a", {
    className: "bc-index",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 29
    }
  }, __jsx("i", {
    className: "icons icon-bc-index",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 28,
      columnNumber: 33
    }
  }), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 33
    }
  }, "Home"))), showBreadcrumb[3] && __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
    href: showBreadcrumb[3] == 'servicios' ? '/servicios/todos' : showBreadcrumb[3] == 'tramites-en-linea' ? '/tramites-en-linea/autorizacion-de-viaje' : showBreadcrumb[3],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 35,
      columnNumber: 25
    }
  }, __jsx("a", {
    className: "bci-next",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 36,
      columnNumber: 29
    }
  }, __jsx("i", {
    className: "icons icon-right-small-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 37,
      columnNumber: 33
    }
  }), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 38,
      columnNumber: 33
    }
  }, showBreadcrumb[3] == 'servicios' ? 'Servicios' : showBreadcrumb[3].replace(/-/gi, ' ')))), showBreadcrumb[4] && __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
    href: showBreadcrumb[5] ? '../' + showBreadcrumb[4] : showBreadcrumb[4],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 44,
      columnNumber: 25
    }
  }, __jsx("a", {
    className: "bci-next",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 45,
      columnNumber: 29
    }
  }, __jsx("i", {
    className: "icons icon-right-small-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46,
      columnNumber: 33
    }
  }), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 47,
      columnNumber: 33
    }
  }, showBreadcrumb[4].replace(/-/gi, ' ')))), showBreadcrumb[5] && __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
    href: showBreadcrumb[5],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 25
    }
  }, __jsx("a", {
    className: "bci-next",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 29
    }
  }, __jsx("i", {
    className: "icons icon-right-small-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 33
    }
  }), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56,
      columnNumber: 33
    }
  }, showBreadcrumb[5].replace(/-/gi, ' ')))))));
};

/* harmony default export */ __webpack_exports__["default"] = (BreadCrumb);

/***/ }),

/***/ "./components/contacto/popup-thanks.js":
/*!*********************************************!*\
  !*** ./components/contacto/popup-thanks.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../config */ "./config.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\contacto\\popup-thanks.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;





const PopupThanks = props => {
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    function pChangeHeight() {
      jquery__WEBPACK_IMPORTED_MODULE_2___default()('.item-popup').each(function (i, e) {
        if (typeof jquery__WEBPACK_IMPORTED_MODULE_2___default()(this) != 'undefined') {
          if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).length > 0 && jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).is(':visible')) {
            var popupHeight = jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).find('.int-content').outerHeight();

            if (popupHeight + 50 >= jquery__WEBPACK_IMPORTED_MODULE_2___default()(window).outerHeight()) {
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).addClass('p-change-height');
            } else {
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeClass('p-change-height');
            }
          }
        }
      });
    }

    jquery__WEBPACK_IMPORTED_MODULE_2___default()(window).resize(function () {
      pChangeHeight();
    });
    pChangeHeight();
  }, []);
  return __jsx("div", {
    className: "item-popup",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "int-pscroll",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "int-content",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "close-popup-2",
    onClick: props.eClick,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 21
    }
  }, __jsx("i", {
    className: "icons icon-close-popup-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 75
    }
  })), __jsx("div", {
    className: "int-body",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56,
      columnNumber: 21
    }
  }, __jsx("img", {
    src: _config__WEBPACK_IMPORTED_MODULE_3__["default"].URL + "/img/thank-social.png?v=2",
    alt: "thanks",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 57,
      columnNumber: 25
    }
  }), props.children, __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
    href: "/",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 59,
      columnNumber: 25
    }
  }, __jsx("a", {
    className: "popup-button",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 60,
      columnNumber: 29
    }
  }, __jsx("img", {
    src: _config__WEBPACK_IMPORTED_MODULE_3__["default"].URL + "/img/button-back-to-init.png?v=1",
    alt: "Bank to init",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 60,
      columnNumber: 57
    }
  })))))));
};

/* harmony default export */ __webpack_exports__["default"] = (PopupThanks);

/***/ }),

/***/ "./components/container.js":
/*!*********************************!*\
  !*** ./components/container.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ "next/head");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _header_top__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./header-top */ "./components/header-top.js");
/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./header */ "./components/header.js");
/* harmony import */ var _footer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./footer */ "./components/footer.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config */ "./config.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\container.js";

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;






const Container = props => {
  //console.log(props)
  return __jsx("div", {
    className: "body-main",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 9
    }
  }, __jsx(next_head__WEBPACK_IMPORTED_MODULE_1___default.a, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 13
    }
  }, __jsx("title", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13,
      columnNumber: 17
    }
  }, "Notaria Roman - ", props.titlePage), __jsx("meta", {
    "http-equiv": "Cache-control",
    content: "public",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14,
      columnNumber: 17
    }
  }), __jsx("meta", {
    "http-equiv": "x-ua-compatible",
    content: "ie=edge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 17
    }
  }), __jsx("meta", {
    "http-equiv": "Content-Type",
    content: "text/html; charset=utf-8",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 17
    }
  }), __jsx("link", {
    rel: "shortcut icon",
    href: "../../img/favicon.png",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 17,
      columnNumber: 17
    }
  }), __jsx("meta", {
    name: "description",
    content: "\xA1Reserva tu cita en Notaria Roman!",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18,
      columnNumber: 17
    }
  }), __jsx("meta", {
    name: "viewport",
    content: "width=device-width, initial-scale=1, shrink-to-fit=no",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 19,
      columnNumber: 17
    }
  }), __jsx("link", {
    rel: "stylesheet",
    href: _config__WEBPACK_IMPORTED_MODULE_5__["default"].URL + "/common/css/main.min.css",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 17
    }
  })), __jsx(_header__WEBPACK_IMPORTED_MODULE_3__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23,
      columnNumber: 13
    }
  }), __jsx("div", {
    className: "body " + props.namePage,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 25,
      columnNumber: 13
    }
  }, props.children), __jsx(_footer__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 13
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (Container);

/***/ }),

/***/ "./components/detail.js":
/*!******************************!*\
  !*** ./components/detail.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\detail.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;



const Detail = props => {
  //console.log(props)
  return __jsx("div", {
    className: "section " + props.class,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "container-fluid wrapper-fluid",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "flex between-xs top-xs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "col-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 21
    }
  }, props.dataList), __jsx("div", {
    className: "col-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 21
    }
  }, props.dataContent))));
};
/*
Detail.getInitialProps = async (ctx) => {    
    return {
        catNameUrl: ctx.query.namecat,
        currentUrl: ctx.query.detalle
    }
}
*/


/* harmony default export */ __webpack_exports__["default"] = (Detail);

/***/ }),

/***/ "./components/footer.js":
/*!******************************!*\
  !*** ./components/footer.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./config.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\footer.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;





const Footer = () => {
  const {
    0: showAccordionData,
    1: setShowAccodionData
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])({
    accordionItem: null
  });
  const {
    0: dataTramiteList,
    1: setDataTramiteList
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])([]);
  const {
    0: dataServicioList,
    1: setDataServicioList
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])([]);

  const capitalize = s => {
    return s.charAt(0).toUpperCase() + s.slice(1);
  };

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    let aScript = document.createElement('script');
    aScript.type = 'text/javascript';
    aScript.src = " https://js.stripe.com/v3/";
    document.head.appendChild(aScript);

    aScript.onload = () => {
      let body = document.body,
          html = document.documentElement;
      let htmlHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
      let screenHeight = window.screen.height;
      document.getElementsByClassName('scroll-up')[0].addEventListener('click', function (event) {
        event.preventDefault();
        window.scrollTo({
          'top': 0
        });
      });

      function debounce(func, wait = 10, immediate = true) {
        let timeout;
        return function () {
          let context = this,
              args = arguments;

          let later = function () {
            timeout = null;
            if (!immediate) func.apply(context, args);
          };

          let callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if (callNow) func.apply(context, args);
        };
      }

      var scrollPos = 0;
      const nav = document.querySelector('.scroll-up');

      function checkPosition() {
        let windowY = window.scrollY;

        if (windowY > screenHeight) {
          // Scrolling UP                    
          nav.classList.add('is-visible');
          nav.classList.remove('is-hidden');
        } else {
          // Scrolling DOWN
          nav.classList.add('is-hidden');
          nav.classList.remove('is-visible');
        }

        scrollPos = windowY;
      }

      window.addEventListener('scroll', debounce(checkPosition)); //window.addEventListener('scroll', checkPosition)
    };

    const getTramite = async () => {
      const result = await axios__WEBPACK_IMPORTED_MODULE_2___default()(_config__WEBPACK_IMPORTED_MODULE_3__["default"].API_PATH + '/tramite-short'); //console.log(result.data)

      setDataTramiteList(result.data);
      const result2 = await axios__WEBPACK_IMPORTED_MODULE_2___default()(_config__WEBPACK_IMPORTED_MODULE_3__["default"].API_PATH + '/servicios-mini-short');
      setDataServicioList(result2.data);
    };

    getTramite();
  }, []);

  function setShow(name) {
    const newStatus = showAccordionData.accordionItem == name ? null : name;
    setShowAccodionData({
      accordionItem: newStatus
    });
  }

  return __jsx(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, __jsx("footer", {
    className: "footer",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "container-fluid wrapper-fluid",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 98,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "col-xs-12 col-md-10 col-lg-6 flex column-xs footer-nav-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 99,
      columnNumber: 25
    }
  }, __jsx("div", {
    className: "col-xs-12 col-sm-4 col-md-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101,
      columnNumber: 29
    }
  }, __jsx("img", {
    src: "../../img/logo-footer.png?v=1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 102,
      columnNumber: 33
    }
  }), __jsx("div", {
    className: "office-hour",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 104,
      columnNumber: 33
    }
  }, __jsx("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 105,
      columnNumber: 37
    }
  }, "Horario de atenci\xF3n:"), __jsx("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 106,
      columnNumber: 37
    }
  }, "9:00am - 6:00pm (Verano)"), __jsx("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 107,
      columnNumber: 37
    }
  }, "9:00am - 7:00pm (Resto del a\xF1o)")), __jsx("div", {
    className: "footer-list-data",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 33
    }
  }, __jsx("a", {
    href: "tel:017151588",
    className: "phone",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 111,
      columnNumber: 37
    }
  }, __jsx("i", {
    className: "icons icon-phone",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 41
    }
  }), __jsx("span", {
    className: "list-parent",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 41
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 45
    }
  }, "Central telef\xF3nica:"), __jsx("span", {
    className: "num-phone",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 45
    }
  }, "(01) + 7151588"))), __jsx("a", {
    href: "#",
    className: "city",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 37
    }
  }, __jsx("i", {
    className: "icons icon-place",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 41
    }
  }), __jsx("span", {
    className: "list-parent",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121,
      columnNumber: 41
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 45
    }
  }, "Direcci\xF3n:"), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 123,
      columnNumber: 45
    }
  }, "Avenida Javier Prado Este, 1451"))), __jsx("a", {
    href: "mailto:informes@notariaroman.com",
    className: "mail",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 37
    }
  }, __jsx("i", {
    className: "icons icon-mail",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 41
    }
  }), __jsx("span", {
    className: "list-parent",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 41
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 45
    }
  }, "Escribenos a:"), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 131,
      columnNumber: 45
    }
  }, "Informes@notariaroman.com"))))), __jsx("div", {
    className: "col-xs-12 col-sm-4 col-md-3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "footer-list-style-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 33
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 37
    }
  }, "Tr\xE1mites en l\xEDnea"), __jsx("div", {
    className: "list-footer services-list-footer",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 37
    }
  }, dataTramiteList.listTramite != undefined && dataTramiteList.listTramite.map((item, index) => {
    return __jsx(next_link__WEBPACK_IMPORTED_MODULE_0___default.a, {
      key: index,
      href: '/tramites-en-linea/' + item.link,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 143,
        columnNumber: 56
      }
    }, __jsx("a", {
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 144,
        columnNumber: 53
      }
    }, item.title));
  })))), __jsx("div", {
    className: "col-xs-12 col-sm-4 col-md-4 do-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "footer-list-style-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 152,
      columnNumber: 33
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 153,
      columnNumber: 37
    }
  }, "Servicios"), __jsx("div", {
    className: "list-footer formalities-list-footer accordion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 37
    }
  }, dataServicioList.listCategoriasShort != undefined && dataServicioList.listCategoriasShort.map((item, index) => {
    return typeof item.data != "undefined" && __jsx("div", {
      className: "accordion-item",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 160,
        columnNumber: 57
      }
    }, __jsx("button", {
      className: "accordion-button",
      onClick: () => setShow('acc' + index),
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 161,
        columnNumber: 61
      }
    }, __jsx("span", {
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 162,
        columnNumber: 65
      }
    }, item.titleCat), __jsx("i", {
      className: "icons icon-arrow-down-small-2",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 163,
        columnNumber: 65
      }
    })), showAccordionData.accordionItem == 'acc' + index && __jsx("div", {
      className: "accordion-data list-footer",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 167,
        columnNumber: 65
      }
    }, item.data.map((item2, index2) => {
      return __jsx(next_link__WEBPACK_IMPORTED_MODULE_0___default.a, {
        key: index + '-' + index2,
        href: '/servicios/' + item.linkCat + '/' + item2.linkCat,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 170,
          columnNumber: 84
        }
      }, __jsx("a", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 171,
          columnNumber: 85
        }
      }, capitalize(item2.title)));
    })));
  }))))), __jsx("div", {
    className: "col-xs-12 col-md-10 col-lg-6 flex footer-nav-list-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 191,
      columnNumber: 25
    }
  }, __jsx("div", {
    className: "footer-row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "footer-list-style-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194,
      columnNumber: 33
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 195,
      columnNumber: 37
    }
  }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_0___default.a, {
    href: "/nuestra-notaria",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 196,
      columnNumber: 41
    }
  }, __jsx("a", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197,
      columnNumber: 45
    }
  }, "Nuestra notaria"))))), __jsx("div", {
    className: "footer-row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "footer-list-style-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 204,
      columnNumber: 33
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205,
      columnNumber: 37
    }
  }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_0___default.a, {
    href: "/nuestro-equipo",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 206,
      columnNumber: 41
    }
  }, __jsx("a", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 207,
      columnNumber: 45
    }
  }, "Nuestro Equipo"))))), __jsx("div", {
    className: "footer-row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 213,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "footer-list-style-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 214,
      columnNumber: 33
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 215,
      columnNumber: 37
    }
  }, "Consultas"))), __jsx("div", {
    className: "footer-row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 219,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "footer-list-style-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 220,
      columnNumber: 33
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 221,
      columnNumber: 37
    }
  }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_0___default.a, {
    href: "/contacto",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 41
    }
  }, __jsx("a", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 223,
      columnNumber: 45
    }
  }, "Contacto"))))), __jsx("div", {
    className: "footer-row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 229,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "footer-list-style-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 230,
      columnNumber: 33
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 231,
      columnNumber: 37
    }
  }, "Reserva de citas")))))), __jsx("div", {
    className: "container-fluid wrapper-fluid footer-nav-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "flex top-xs middle-sm footer-nav-3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 240,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "col-md-7 flex between-md start-xs middle-sm footer-nav-3-child",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 241,
      columnNumber: 25
    }
  }, __jsx("p", {
    className: "copyright",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 242,
      columnNumber: 29
    }
  }, "\xA9Todos los derechos reservados 2020 Notar\xEDa Roman"), __jsx("div", {
    className: "legals",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243,
      columnNumber: 29
    }
  }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_0___default.a, {
    href: "/terminos-y-condiciones",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244,
      columnNumber: 33
    }
  }, __jsx("a", {
    target: "_blank",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 245,
      columnNumber: 37
    }
  }, "Terminos y condiciones")), __jsx(next_link__WEBPACK_IMPORTED_MODULE_0___default.a, {
    href: "/politicas-de-privacidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248,
      columnNumber: 33
    }
  }, __jsx("a", {
    target: "_blank",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 249,
      columnNumber: 37
    }
  }, "Politica de privicidad")))), __jsx("div", {
    className: "col-md-5 flex end-md start-xs middle-sm",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253,
      columnNumber: 25
    }
  }, __jsx("a", {
    href: "https://libiak.com/",
    target: "_blank",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 254,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "brand-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 255,
      columnNumber: 33
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 256,
      columnNumber: 37
    }
  }, "Desarrollado por"), __jsx("img", {
    src: "../../img/libiak.png?v=1",
    alt: "Libiak",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257,
      columnNumber: 37
    }
  }))))))), __jsx("button", {
    className: "scroll-up",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 265,
      columnNumber: 13
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (Footer);

/***/ }),

/***/ "./components/form-payment.js":
/*!************************************!*\
  !*** ./components/form-payment.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./config.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\form-payment.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




const FormPayment = props => {
  return __jsx("div", {
    className: "payment-method-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 13
    }
  }, "M\xE9todo de pago:"), __jsx("p", {
    style: {
      marginTop: 10
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 13
    }
  }, "Puede realizar el pago en cualquiera de nuestras cuentas."), __jsx("div", {
    className: "pmf-item pmf-item-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13,
      columnNumber: 13
    }
  }, __jsx("img", {
    src: _config__WEBPACK_IMPORTED_MODULE_2__["default"].URL + "/img/bcp.png?v=2",
    alt: 'Banco de credito',
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14,
      columnNumber: 17
    }
  }), __jsx("div", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 17
    }
  }, __jsx("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 21
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 24
    }
  }, "Cuenta para pagos notariales"), " ", __jsx("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 70
    }
  }), "a nombre de ", __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 87
    }
  }, "Manuel Alipio Roman Olivas Banco")), __jsx("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 17,
      columnNumber: 21
    }
  }, "Cuenta corriente  / Soles / Banco de credito BCP"))), __jsx("div", {
    className: "parent-list",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 13
    }
  }, __jsx("ul", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 17
    }
  }, __jsx("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23,
      columnNumber: 21
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 25
    }
  }, "Numero de cuenta:"), __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 25,
      columnNumber: 25
    }
  }, "191-1933343-0-16")), __jsx("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 21
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 28,
      columnNumber: 25
    }
  }, "Codigo de cuenta interbancario:"), __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 25
    }
  }, "CCI : 002-191-001933343016-53")), __jsx("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 31,
      columnNumber: 21
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 32,
      columnNumber: 25
    }
  }, "Numero de detraccion:"), __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 33,
      columnNumber: 25
    }
  }, "00098075445")))), __jsx("div", {
    className: "pmf-item pmf-item-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39,
      columnNumber: 13
    }
  }, __jsx("img", {
    src: _config__WEBPACK_IMPORTED_MODULE_2__["default"].URL + "/img/bcp.png?v=2",
    alt: 'Banco de credito',
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 40,
      columnNumber: 17
    }
  }), __jsx("div", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 41,
      columnNumber: 17
    }
  }, __jsx("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 21
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 24
    }
  }, "Cuenta para pagos a registros p\xFAblicos"), " ", __jsx("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 80
    }
  }), "a nombre de ", __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 97
    }
  }, "Manuel Alipio Roman Olivas Banco")), __jsx("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 21
    }
  }, "Cuenta corriente  / Soles / Banco de credito BCP"))), __jsx("div", {
    className: "parent-list",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 47,
      columnNumber: 13
    }
  }, __jsx("ul", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 48,
      columnNumber: 17
    }
  }, __jsx("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49,
      columnNumber: 21
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 50,
      columnNumber: 25
    }
  }, "Numero de cuenta:"), __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 51,
      columnNumber: 25
    }
  }, "191-21358080-016")), __jsx("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 21
    }
  }, __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 25
    }
  }, "Codigo de cuenta interbancario:"), __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 25
    }
  }, "CCI : 002-191-12135808001655")))));
};

/* harmony default export */ __webpack_exports__["default"] = (FormPayment);

/***/ }),

/***/ "./components/formalities-list-item.js":
/*!*********************************************!*\
  !*** ./components/formalities-list-item.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_html_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-html-parser */ "react-html-parser");
/* harmony import */ var react_html_parser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_html_parser__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_slick__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-slick */ "react-slick");
/* harmony import */ var react_slick__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_slick__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config */ "./config.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\formalities-list-item.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;






const FortilitiesListItem = props => {
  const img = props.data.img.length > 2 ? JSON.parse(props.data.img)[0] : '';
  const folder = props.data.folder;
  return __jsx("div", {
    className: "slick-item",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "caption",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14,
      columnNumber: 13
    }
  }, __jsx("div", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "parent-title-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 21
    }
  }, __jsx("img", {
    style: {
      width: 38
    },
    src: _config__WEBPACK_IMPORTED_MODULE_4__["default"].URL_BACK + "/uploads/" + folder + "/" + img + "?v=2",
    alt: props.data.description,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 17,
      columnNumber: 25
    }
  }), __jsx("h2", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18,
      columnNumber: 25
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18,
      columnNumber: 29
    }
  }, props.data.title))), __jsx("p", {
    className: "description",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 21
    }
  }, props.data.description), __jsx(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
    href: props.typeLink == 2 ? '../../tramites-en-linea/' + props.data.link : 'tramites-en-linea/' + props.data.link,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 21
    }
  }, __jsx("a", {
    className: "button-link",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 25
    }
  }, "Solicitar tr\xE1mite")))));
};

/* harmony default export */ __webpack_exports__["default"] = (FortilitiesListItem);

/***/ }),

/***/ "./components/formalities-list.js":
/*!****************************************!*\
  !*** ./components/formalities-list.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_slick__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-slick */ "react-slick");
/* harmony import */ var react_slick__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_slick__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _formalities_list_item__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formalities-list-item */ "./components/formalities-list-item.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\formalities-list.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }






const FortilitiesList = props => {
  const {
    0: dataFormalities,
    1: setDataFormalities
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(props.data);
  const settings = {
    dots: false,
    infinite: true,
    speed: 500,
    slidesToShow: 4,
    slidesToScroll: 2,
    autoplay: true,
    autoplaySpeed: 5000,
    responsive: [{
      breakpoint: 1050,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 1
      }
    }, {
      breakpoint: 720,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 1
      }
    }, {
      breakpoint: 520,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  };
  const dataList = dataFormalities.map((item, index) => {
    return __jsx(_formalities_list_item__WEBPACK_IMPORTED_MODULE_3__["default"], {
      typeLink: props.typeLink,
      key: index,
      data: item,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45,
        columnNumber: 16
      }
    });
  });
  return __jsx("div", {
    className: "section formalities-list list-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "container-fluid wrapper-fluid",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 50,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "box",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 51,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "parent-title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 21
    }
  }, __jsx("h2", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 25
    }
  }, "Pensando en nuestros clientes, ", __jsx("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 60
    }
  }), "habilitamos nuestros ", __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56,
      columnNumber: 50
    }
  }, "tr\xE1mites en l\xEDnea"))), __jsx("div", {
    className: "slideshow-formalities slideshow-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 60,
      columnNumber: 21
    }
  }, __jsx(react_slick__WEBPACK_IMPORTED_MODULE_1___default.a, _extends({}, settings, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 61,
      columnNumber: 25
    }
  }), dataList)), __jsx(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/tramites-en-linea/autorizacion-de-viaje",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 66,
      columnNumber: 21
    }
  }, __jsx("a", {
    className: "btn-formalities",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 67,
      columnNumber: 25
    }
  }, "Ver todos los tr\xE1mites en l\xEDnea")))));
};

/* harmony default export */ __webpack_exports__["default"] = (FortilitiesList);

/***/ }),

/***/ "./components/header-top.js":
/*!**********************************!*\
  !*** ./components/header-top.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./navigation */ "./components/navigation.js");
/* harmony import */ var _navigation_small__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation-small */ "./components/navigation-small.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\header-top.js";

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;




const Header = () => {
  return __jsx("div", {
    className: "header-top",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 7,
      columnNumber: 9
    }
  }, __jsx("div", {
    className: "container-fluid wrapper-fluid",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 8,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "row middle-xs around-xs end-sm header-top-list",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9,
      columnNumber: 17
    }
  }, __jsx("a", {
    href: "tel:017151588",
    className: "phone",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10,
      columnNumber: 21
    }
  }, __jsx("i", {
    className: "icons icon-phone",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11,
      columnNumber: 25
    }
  }), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12,
      columnNumber: 25
    }
  }, "(01) + 7151588")), __jsx("a", {
    href: "#",
    className: "city",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 21
    }
  }, __jsx("i", {
    className: "icons icon-place",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 25
    }
  }), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 17,
      columnNumber: 25
    }
  }, "Avenida Javier Prado Este, 1451")), __jsx("a", {
    href: "mailto:informes@notariaroman.com",
    className: "mail",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 21
    }
  }, __jsx("i", {
    className: "icons icon-mail",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 25
    }
  }), __jsx("span", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 25
    }
  }, "Informes@notariaroman.com")))));
};

/* harmony default export */ __webpack_exports__["default"] = (Header);

/***/ }),

/***/ "./components/header.js":
/*!******************************!*\
  !*** ./components/header.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./navigation */ "./components/navigation.js");
/* harmony import */ var _navigation_small__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation-small */ "./components/navigation-small.js");
/* harmony import */ var _header_top__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./header-top */ "./components/header-top.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config */ "./config.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\header.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;







const Header = () => {
  const {
    0: handleTogglenav,
    1: setHandleToggleNav
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])({
    class: 'nav-hide'
  });

  const toggleNav = () => {
    const toggleClass = handleTogglenav.class == 'nav-hide' ? 'nav-show' : 'nav-hide';
    setHandleToggleNav({
      class: toggleClass
    });
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("header", {
    className: "header",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 19,
      columnNumber: 13
    }
  }, __jsx(_header_top__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 17
    }
  }), __jsx("div", {
    className: "container-fluid wrapper-fluid " + handleTogglenav.class,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 17
    }
  }, __jsx("button", {
    className: "button-nav-mobile",
    onClick: () => toggleNav(),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 21
    }
  }, __jsx("i", {
    className: "icons icon-button-nav-mobile",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23,
      columnNumber: 25
    }
  })), __jsx("div", {
    className: "row between-xs middle-xs wrapper-nav",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 25,
      columnNumber: 21
    }
  }, __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
    href: "/",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 26,
      columnNumber: 25
    }
  }, __jsx("a", {
    className: "parent-logo",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 29
    }
  }, __jsx("img", {
    className: "logo",
    src: _config__WEBPACK_IMPORTED_MODULE_5__["default"].URL + "/img/logo.png?v=1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 56
    }
  }))), __jsx("div", {
    className: "navigation-small-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 30,
      columnNumber: 25
    }
  }, __jsx(_navigation_small__WEBPACK_IMPORTED_MODULE_3__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 31,
      columnNumber: 29
    }
  })), __jsx("div", {
    className: "row between-md parent-nav",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 25
    }
  }, __jsx(_navigation__WEBPACK_IMPORTED_MODULE_2__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 35,
      columnNumber: 29
    }
  }), __jsx(_navigation_small__WEBPACK_IMPORTED_MODULE_3__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 36,
      columnNumber: 29
    }
  }))))), __jsx("div", {
    className: "space-header",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 41,
      columnNumber: 13
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (Header);

/***/ }),

/***/ "./components/navigation-item.js":
/*!***************************************!*\
  !*** ./components/navigation-item.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\navigation-item.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



const NavigationItem = props => {
  const {
    0: showNavitem,
    1: setShowNavItem
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: navItems,
    1: setNavItems
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (props.childrens.length > 2) {
      setNavItems([...props.childrens]);
    }
  }, []);

  const verifyClass = classs => {
    let res = '';

    if (classs != undefined) {
      res += classs + ' ';
    }

    if (props.childrens.length > 0) {
      res += 'with-subnav';
    }

    return res;
  };

  const verifyLink = () => {
    let res;

    if (props.childrens.length > 0) {
      res = __jsx("a", {
        className: verifyClass(props.class),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38,
          columnNumber: 19
        }
      }, __jsx("span", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 39,
          columnNumber: 17
        }
      }, props.name));
    } else {
      if (props.target == true) {
        res = __jsx("a", {
          href: props.link,
          target: "_blank",
          className: verifyClass(props.class),
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 45,
            columnNumber: 23
          }
        }, __jsx("span", {
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 46,
            columnNumber: 25
          }
        }, props.name));
      } else {
        res = __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
          href: props.link,
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49,
            columnNumber: 23
          }
        }, __jsx("a", {
          className: verifyClass(props.class),
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 50,
            columnNumber: 21
          }
        }, __jsx("span", {
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 51,
            columnNumber: 25
          }
        }, props.name)));
      }
    }

    return res;
  };

  const subNavList = navItems.map((currentElem, index) => {
    return __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
      key: index,
      href: currentElem.link,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 63,
        columnNumber: 16
      }
    }, __jsx("a", {
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64,
        columnNumber: 13
      }
    }, currentElem.name));
  });
  return __jsx("li", {
    onMouseEnter: () => !setShowNavItem(true),
    onMouseLeave: () => setShowNavItem(false),
    className: props.classActive,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 70,
      columnNumber: 9
    }
  }, verifyLink(), showNavitem && props.childrens.length > 2 && __jsx("div", {
    className: "sub-nav",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 73,
      columnNumber: 17
    }
  }, subNavList));
};

/* harmony default export */ __webpack_exports__["default"] = (NavigationItem);

/***/ }),

/***/ "./components/navigation-small.js":
/*!****************************************!*\
  !*** ./components/navigation-small.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\navigation-small.js";

var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;


const Navigation = () => {
  return __jsx("div", {
    className: "nav-small",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 5,
      columnNumber: 9
    }
  }, __jsx("a", {
    className: "btn-reserve",
    href: "http://reservas.notariaroman.pe",
    target: "_blank",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 13
    }
  }, "Reserva de citas"), __jsx("a", {
    className: "btn-fb",
    href: "https://www.facebook.com/notariaroman/",
    target: "_blank",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 7,
      columnNumber: 13
    }
  }, "Facebook"));
};

/* harmony default export */ __webpack_exports__["default"] = (Navigation);

/***/ }),

/***/ "./components/navigation.js":
/*!**********************************!*\
  !*** ./components/navigation.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _navigation_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./navigation-item */ "./components/navigation-item.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\navigation.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;



const Navigation = props => {
  const {
    0: navOptions,
    1: setNavOptions
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([{
    class: 'nav-item-home',
    name: 'Home',
    link: '/',
    target: false,
    childrens: []
  }, {
    class: '',
    name: 'Tramites en linea',
    link: '/tramites-en-linea',
    target: false,
    childrens: [{
      name: 'Autorización de viaje',
      link: '/tramites-en-linea/autorizacion-de-viaje'
    }, {
      name: 'Constitución de empresas',
      link: '/tramites-en-linea/constitucion-de-empresas'
    }, {
      name: 'Poderes',
      link: '/tramites-en-linea/poderes'
    }, {
      name: 'Transferencias inmobiliarias',
      link: '/tramites-en-linea/transferencias-inmobiliarias'
    }, {
      name: 'Transferencias vehiculares',
      link: '/tramites-en-linea/transferencias-vehiculares'
    }]
  }, {
    class: '',
    name: 'Servicios',
    link: '/servicios',
    target: false,
    childrens: [{
      name: 'Todos',
      link: '/servicios/todos'
    }, {
      name: 'Instrumentos Protocolares',
      link: '/servicios/instrumentos-protocolares'
    }, {
      name: 'Asuntos No Contenciosos',
      link: '/servicios/asuntos-no-contenciosos'
    }, {
      name: 'Instrumentos Extra Protocolares',
      link: '/servicios/instrumentos-extra-protocolares'
    }]
  }, {
    class: '',
    name: 'Nuestra Notaria',
    link: '/nuestra-notaria',
    childrens: []
  }, {
    class: '',
    name: 'Nuestro Equipo',
    link: '/nuestro-equipo',
    target: false,
    childrens: []
  }, {
    class: '',
    name: 'Consultas',
    link: 'http://consultas.notariaroman.pe',
    target: true,
    childrens: []
  }, {
    class: '',
    name: 'Contacto',
    link: '/contacto',
    target: false,
    childrens: []
  }]);
  const {
    0: currentActive,
    1: setCurrentActive
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    function searchInObject(nameKey, myArray) {
      for (var i = 0; i < myArray.length; i++) {
        if (myArray[i].link === nameKey) {
          return true;
        }
      }
    }

    function searchInMultiObject(nameKey, myArray) {
      for (var i = 0; i < myArray.length; i++) {
        for (var j = 0; j < myArray[i].childrens.length; j++) {
          if (myArray[i][j].link === nameKey) {
            return myArray[i][j].link;
          }
        }
      }
    }

    let arrCurrentPath = window.location.href.split('/');
    setCurrentActive(arrCurrentPath[3]);
  }, []);
  const mapData = navOptions.map((item, index) => {
    return __jsx(_navigation_item__WEBPACK_IMPORTED_MODULE_1__["default"], {
      classActive: item.link == '/' + currentActive ? 'active' : '',
      target: item.target,
      key: index,
      class: item.class,
      name: item.name,
      link: item.link,
      childrens: item.childrens,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105,
        columnNumber: 61
      }
    });
  });
  return __jsx("nav", {
    className: "nav",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 9
    }
  }, __jsx("ul", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 13
    }
  }, mapData));
};

/* harmony default export */ __webpack_exports__["default"] = (Navigation);

/***/ }),

/***/ "./components/tramites-forms/autorizacion-de-viaje.js":
/*!************************************************************!*\
  !*** ./components/tramites-forms/autorizacion-de-viaje.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "react-hook-form");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../config */ "./config.js");
/* harmony import */ var _components_form_payment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/form-payment */ "./components/form-payment.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _autorizacion_de_viaje_nacional__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./autorizacion-de-viaje/nacional */ "./components/tramites-forms/autorizacion-de-viaje/nacional.js");
/* harmony import */ var _autorizacion_de_viaje_internacional__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./autorizacion-de-viaje/internacional */ "./components/tramites-forms/autorizacion-de-viaje/internacional.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\tramites-forms\\autorizacion-de-viaje.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;










const AutorizacionViaje = props => {
  const {
    register,
    errors,
    handleSubmit
  } = Object(react_hook_form__WEBPACK_IMPORTED_MODULE_2__["useForm"])();
  const {
    0: showForm,
    1: setShowForm
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: formBody,
    1: setFormBody
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: fileImg,
    1: setFileImg
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile,
    1: setCountFile
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    var country = 'Peru',
        countryCode = "+51";
    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).click(function (e) {
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).closest('.container-flag').length <= 0 && !jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('flat-item')) jquery__WEBPACK_IMPORTED_MODULE_3___default()('.list-flag').fadeOut(150);
    });
    /********/

    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).on('click', function (e) {
      //----------
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('item-popup')) {
        setShowForm(false);
      }

      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('int-pscroll')) {
        setShowForm(false);
      }
    });
  }, []);

  const formReset = () => {
    setFileImg([]);
    setCountFile([]); //document.querySelector("#form-data").reset()

    document.getElementsByTagName("form")[0].reset();
    document.querySelector('#comprobante_img_place').innerHTML = "Adjuntar voucher";
  };

  const triggerClosePopup = () => {
    setShowForm(false);
  };

  const changeTipoViaje = () => {
    setFormBody(formBody ? false : true);
    formReset();
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "section tramite-form with-bg-img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 67,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 69,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "caption caption-static caption-type-1 caption-type-2 " + props.width,
    style: {
      marginTop: 0
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 70,
      columnNumber: 25
    }
  }, __jsx("div", {
    className: "parent-title-2 start-xs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 71,
      columnNumber: 29
    }
  }, __jsx("h2", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 72,
      columnNumber: 33
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 72,
      columnNumber: 37
    }
  }, "Autorizaci\xF3n de viaje"))), __jsx("div", {
    className: "block-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 75,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 77,
      columnNumber: 33
    }
  }, __jsx("label", {
    htmlFor: "tipoViaje",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 78,
      columnNumber: 37
    }
  }, "Por favor selecci\xF3na el ", __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 78,
      columnNumber: 88
    }
  }, " tipo de autorizaci\xF3n")), __jsx("select", {
    className: "form-item",
    name: "tipoViaje",
    id: "tipoViaje",
    onChange: e => changeTipoViaje(),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 79,
      columnNumber: 37
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 85,
      columnNumber: 41
    }
  }, "Viaje nacional"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 86,
      columnNumber: 41
    }
  }, "Viaje Internaci\xF3nal")))), formBody ? __jsx(_autorizacion_de_viaje_nacional__WEBPACK_IMPORTED_MODULE_7__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92,
      columnNumber: 41
    }
  }) : __jsx(_autorizacion_de_viaje_internacional__WEBPACK_IMPORTED_MODULE_8__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92,
      columnNumber: 60
    }
  })))));
};

/* harmony default export */ __webpack_exports__["default"] = (AutorizacionViaje);

/***/ }),

/***/ "./components/tramites-forms/autorizacion-de-viaje/internacional.js":
/*!**************************************************************************!*\
  !*** ./components/tramites-forms/autorizacion-de-viaje/internacional.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "react-hook-form");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./config.js");
/* harmony import */ var _components_form_payment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../components/form-payment */ "./components/form-payment.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../contacto/popup-thanks */ "./components/contacto/popup-thanks.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\tramites-forms\\autorizacion-de-viaje\\internacional.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;








const AutorizacionViajeInternacional = props => {
  const {
    register,
    errors,
    handleSubmit
  } = Object(react_hook_form__WEBPACK_IMPORTED_MODULE_2__["useForm"])();
  const {
    0: showForm,
    1: setShowForm
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: formBody,
    1: setFormBody
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: fileImg,
    1: setFileImg
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile,
    1: setCountFile
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);

  const alphanumericValues = str => {
    return str.toString() // Cast to string
    .toLowerCase() // Convert the string to lowercase letters
    .normalize('NFD') // The normalize() method returns the Unicode Normalization Form of a given string.
    .trim() // Remove whitespace from both sides of a string
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-');
  };

  const formReset = () => {
    setFileImg([]);
    setCountFile([]); //document.querySelector("#form-data").reset()

    document.getElementsByTagName("form")[0].reset();
    document.querySelector('#comprobante_img_place').innerHTML = "Adjuntar voucher";
  };

  const fileOnChange = e => {
    if (e.target.files.length > 0) {
      let newNameDate = new Date().getTime();
      let file = e.target.files[0];
      let newName1 = file.name.split('.').shift();
      let newName = alphanumericValues(newName1);
      let blob = file.slice(0, file.size, file.type);
      let newFile = new File([blob], newName + '-' + newNameDate + '.' + file.type.split('/')[1], {
        type: file.type
      });
      document.getElementById('comprobante_img_place').innerHTML = e.target.value.split(/(\\|\/)/g).pop();
      setFileImg(newFile);
      setCountFile([...countFile, newName]);
      document.querySelector('#name_img').value = newName + '-' + newNameDate + '.' + file.type.split('/')[1];
    }
  };

  const onSubmit = data => {
    //console.log(data)
    if (countFile.length > 0) {
      var formData = new FormData();
      formData.append("demo", fileImg);
      axios__WEBPACK_IMPORTED_MODULE_5___default.a.post(_config__WEBPACK_IMPORTED_MODULE_3__["default"].URL_BACK + '/upload-only-img', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(res => {
        console.log('Exito upload');
      }).catch(err => {
        console.error('Error');
      });
    }

    let sendValue = data;
    axios__WEBPACK_IMPORTED_MODULE_5___default()({
      method: 'post',
      url: _config__WEBPACK_IMPORTED_MODULE_3__["default"].API_PATH + '/p-audvi',
      data: sendValue
    }).then(function (response) {
      console.log('Exito');
      setShowForm(true);
      formReset();
    });
  };

  const changeTipoViaje = () => {
    setFormBody(formBody ? false : true);
    formReset();
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, showForm && __jsx(_contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_6__["default"], {
    eClick: triggerClosePopup,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 17
    }
  }, __jsx("h3", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97,
      columnNumber: 21
    }
  }, "\xA1Gracias!"), __jsx("p", {
    className: "description",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 98,
      columnNumber: 21
    }
  }, "Hemos recibido la solicitud de su tr\xE1mite, Autorizaci\xF3n de viaje internacional. Uno de nuestros asesores legales se comunicar\xE1 usted a la brevedad para continuar con el proceso. Te estaremos contactando pronto. No olvide revisar su cuenta de email (bandeja de entrada y o Spam) en donde le hemos enviado toda la informaci\xF3n que nos ha proporcionado. Si tiene otra consulta puede llamar a nuestra central telef\xF3nica (01) 7151588 que estaremos gustosos en atenderlo.")), __jsx("form", {
    id: "form_data_2",
    name: "form_data_2",
    onSubmit: handleSubmit(onSubmit),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 104,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "block-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 106,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108,
      columnNumber: 21
    }
  }, "Datos del padre"), __jsx("input", {
    type: "hidden",
    id: "name_img",
    name: "inter_name_img",
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 21
    }
  }), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 116,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dp_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 117,
      columnNumber: 25
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dp_nombre",
    name: "inter_dp_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 118,
      columnNumber: 25
    }
  }), errors.inter_dp_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 124,
      columnNumber: 52
    }
  }, errors.inter_dp_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dp_nacionalidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 25
    }
  }, "Nacionalidad"), __jsx("input", {
    type: "text",
    id: "dp_nacionalidad",
    name: "inter_dp_nacionalidad",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 25
    }
  }), errors.inter_dp_nacionalidad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135,
      columnNumber: 58
    }
  }, errors.inter_dp_nacionalidad.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 25
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 142,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dp_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 33
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "inter_dp_tipo_doc",
    onChange: e => document.getElementById('dp_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144,
      columnNumber: 33
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151,
      columnNumber: 37
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 152,
      columnNumber: 37
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 153,
      columnNumber: 37
    }
  }, "Pasaporte")), errors.inter_dp_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 155,
      columnNumber: 62
    }
  }, errors.inter_dp_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 158,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dp_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 159,
      columnNumber: 33
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "dp_num_doc",
    name: "inter_dp_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 160,
      columnNumber: 33
    }
  }), errors.inter_dp_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 162,
      columnNumber: 61
    }
  }, errors.inter_dp_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 169,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dp_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 170,
      columnNumber: 25
    }
  }, "Domicilio:"), __jsx("input", {
    type: "text",
    id: "dp_domicilio",
    name: "inter_dp_domicilio",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 171,
      columnNumber: 25
    }
  }), errors.inter_dp_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 176,
      columnNumber: 55
    }
  }, errors.inter_dp_domicilio.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181,
      columnNumber: 21
    }
  }, "Datos de la madre"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dma_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184,
      columnNumber: 25
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dma_nombre",
    name: "inter_dma_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 185,
      columnNumber: 25
    }
  }), errors.inter_dma_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 191,
      columnNumber: 53
    }
  }, errors.inter_dma_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dma_nacionalidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 195,
      columnNumber: 25
    }
  }, "Nacionalidad"), __jsx("input", {
    type: "text",
    id: "dma_nacionalidad",
    name: "inter_dma_nacionalidad",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 196,
      columnNumber: 25
    }
  }), errors.inter_dma_nacionalidad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 59
    }
  }, errors.inter_dma_nacionalidad.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 207,
      columnNumber: 25
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 209,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dma_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210,
      columnNumber: 33
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "inter_dma_tipo_doc",
    onChange: e => document.getElementById('dma_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 211,
      columnNumber: 33
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 218,
      columnNumber: 37
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 219,
      columnNumber: 37
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 220,
      columnNumber: 37
    }
  }, "Pasaporte")), errors.inter_dma_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 63
    }
  }, errors.inter_dma_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 225,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dma_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 226,
      columnNumber: 33
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "dma_num_doc",
    name: "inter_dma_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 227,
      columnNumber: 33
    }
  }), errors.inter_dma_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 229,
      columnNumber: 62
    }
  }, errors.inter_dma_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 236,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dma_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 25
    }
  }, "Domicilio:"), __jsx("input", {
    type: "text",
    id: "dma_domicilio",
    name: "inter_dma_domicilio",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 238,
      columnNumber: 25
    }
  }), errors.inter_dma_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243,
      columnNumber: 56
    }
  }, errors.inter_dma_domicilio.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248,
      columnNumber: 21
    }
  }, "Datos del menor"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 250,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dm_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 251,
      columnNumber: 25
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dm_nombre",
    name: "inter_dm_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 252,
      columnNumber: 25
    }
  }), errors.inter_dm_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 258,
      columnNumber: 52
    }
  }, errors.inter_dm_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 261,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 263,
      columnNumber: 25
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 265,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dm_edad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 266,
      columnNumber: 33
    }
  }, "Edad:"), __jsx("select", {
    className: "form-item",
    name: "inter_dm_edad",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 267,
      columnNumber: 33
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "0",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 273,
      columnNumber: 37
    }
  }, "Menor a 1 a\xF1o"), Array.apply(1, Array(17)).map(function (x, i) {
    return __jsx("option", {
      key: i + 1,
      value: i + 1,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 275,
        columnNumber: 48
      }
    }, i + 1 <= 9 ? '0' + (i + 1) + ' años' : i + 1 + ' años');
  })), errors.inter_dm_edad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 278,
      columnNumber: 58
    }
  }, errors.inter_dm_edad.message)))), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 287,
      columnNumber: 21
    }
  }, "Datos del viaje"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 289,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dv_lugar_viaje",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 290,
      columnNumber: 25
    }
  }, "Lugar del viaje:"), __jsx("input", {
    type: "text",
    id: "dv_lugar_viaje",
    name: "inter_dv_lugar_viaje",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 291,
      columnNumber: 25
    }
  }), errors.inter_dv_lugar_viaje && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 297,
      columnNumber: 57
    }
  }, errors.inter_dv_lugar_viaje.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 300,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dv_duracion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 301,
      columnNumber: 25
    }
  }, "Duraci\xF3n:"), __jsx("input", {
    type: "text",
    id: "dv_duracion",
    name: "inter_dv_duracion",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 302,
      columnNumber: 25
    }
  }), errors.inter_dv_duracion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 307,
      columnNumber: 54
    }
  }, errors.inter_dv_duracion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 310,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dv_observaciones",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 311,
      columnNumber: 25
    }
  }, "Observaciones:"), __jsx("input", {
    type: "text",
    id: "dv_observaciones",
    name: "inter_dv_observaciones",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 312,
      columnNumber: 25
    }
  }), errors.inter_dv_observaciones && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 318,
      columnNumber: 59
    }
  }, errors.inter_dv_observaciones.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 321,
      columnNumber: 21
    }
  }, "Datos de contacto"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 323,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dc_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 324,
      columnNumber: 25
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dc_nombre",
    name: "inter_dc_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 325,
      columnNumber: 25
    }
  }), errors.inter_dc_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 331,
      columnNumber: 52
    }
  }, errors.inter_dc_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 334,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dc_telefono",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 335,
      columnNumber: 25
    }
  }, "Tel\xE9fonos:"), __jsx("input", {
    type: "text",
    id: "dc_telefono",
    name: "inter_dc_telefono",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 336,
      columnNumber: 25
    }
  }), errors.inter_dc_telefono && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 342,
      columnNumber: 54
    }
  }, errors.inter_dc_telefono.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 345,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dc_email",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 346,
      columnNumber: 25
    }
  }, "Email:"), __jsx("input", {
    type: "text",
    id: "dc_email",
    name: "inter_dc_email",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio",
      pattern: {
        value: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        message: "Ingresar un Email valido"
      }
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 347,
      columnNumber: 25
    }
  }), errors.inter_dc_email && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 357,
      columnNumber: 51
    }
  }, errors.inter_dc_email.message)), __jsx(_components_form_payment__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 360,
      columnNumber: 21
    }
  }), __jsx("div", {
    className: "box-form box-file-img box-form-mg-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 362,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 363,
      columnNumber: 25
    }
  }, "Comprobante de pago (opcional):"), __jsx("label", {
    className: "form-item",
    id: "comprobante_img_place",
    htmlFor: "comprobante_img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 364,
      columnNumber: 25
    }
  }, "Adjuntar voucher"), __jsx("input", {
    type: "file",
    id: "comprobante_img",
    name: "inter_comprobante_img",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    accept: ".jpg, .jpeg, .png",
    onChange: e => fileOnChange(e),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 365,
      columnNumber: 25
    }
  })), __jsx("button", {
    type: "submit",
    className: "button",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 372,
      columnNumber: 21
    }
  }, "Enviar tr\xE1mite"))));
};

/* harmony default export */ __webpack_exports__["default"] = (AutorizacionViajeInternacional);

/***/ }),

/***/ "./components/tramites-forms/autorizacion-de-viaje/nacional.js":
/*!*********************************************************************!*\
  !*** ./components/tramites-forms/autorizacion-de-viaje/nacional.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "react-hook-form");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../config */ "./config.js");
/* harmony import */ var _components_form_payment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../components/form-payment */ "./components/form-payment.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../contacto/popup-thanks */ "./components/contacto/popup-thanks.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\tramites-forms\\autorizacion-de-viaje\\nacional.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;








const AutorizacionViajeNacional = props => {
  const {
    register,
    errors,
    handleSubmit
  } = Object(react_hook_form__WEBPACK_IMPORTED_MODULE_2__["useForm"])();
  const {
    0: showForm,
    1: setShowForm
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: formBody,
    1: setFormBody
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: fileImg,
    1: setFileImg
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile,
    1: setCountFile
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);

  const alphanumericValues = str => {
    return str.toString() // Cast to string
    .toLowerCase() // Convert the string to lowercase letters
    .normalize('NFD') // The normalize() method returns the Unicode Normalization Form of a given string.
    .trim() // Remove whitespace from both sides of a string
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-');
  };

  const formReset = () => {
    setFileImg([]);
    setCountFile([]); //document.querySelector("#form-data").reset()

    document.getElementsByTagName("form")[0].reset();
    document.querySelector('#comprobante_img_place').innerHTML = "Adjuntar voucher";
  };

  const fileOnChange = e => {
    if (e.target.files.length > 0) {
      let newNameDate = new Date().getTime();
      let file = e.target.files[0];
      let newName1 = file.name.split('.').shift();
      let newName = alphanumericValues(newName1);
      let blob = file.slice(0, file.size, file.type);
      let newFile = new File([blob], newName + '-' + newNameDate + '.' + file.type.split('/')[1], {
        type: file.type
      });
      document.getElementById('comprobante_img_place').innerHTML = e.target.value.split(/(\\|\/)/g).pop();
      setFileImg(newFile);
      setCountFile([...countFile, newName]);
      document.querySelector('#name_img').value = newName + '-' + newNameDate + '.' + file.type.split('/')[1];
    }
  };

  const onSubmit = data => {
    //console.log(data)
    if (countFile.length > 0) {
      var formData = new FormData();
      formData.append("demo", fileImg);
      axios__WEBPACK_IMPORTED_MODULE_5___default.a.post(_config__WEBPACK_IMPORTED_MODULE_3__["default"].URL_BACK + '/upload-only-img', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(res => {
        console.log('Exito upload');
      }).catch(err => {
        console.error('Error');
      });
    }

    let sendValue = data;
    axios__WEBPACK_IMPORTED_MODULE_5___default()({
      method: 'post',
      url: _config__WEBPACK_IMPORTED_MODULE_3__["default"].API_PATH + '/p-audv',
      data: sendValue
    }).then(function (response) {
      console.log('Exito');
      setShowForm(true);
      formReset();
    });
  };

  const triggerClosePopup = () => {
    setShowForm(false);
  };

  const changeTipoViaje = () => {
    setFormBody(formBody ? false : true);
    formReset();
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, showForm && __jsx(_contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_6__["default"], {
    eClick: triggerClosePopup,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101,
      columnNumber: 17
    }
  }, __jsx("h3", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 102,
      columnNumber: 21
    }
  }, "\xA1Gracias!"), __jsx("p", {
    className: "description",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 103,
      columnNumber: 21
    }
  }, "Hemos recibido la solicitud de su tr\xE1mite, Autorizaci\xF3n de viaje nacional. Uno de nuestros asesores legales se comunicar\xE1 usted a la brevedad para continuar con el proceso. Te estaremos contactando pronto. No olvide revisar su cuenta de email (bandeja de entrada y o Spam) en donde le hemos enviado toda la informaci\xF3n que nos ha proporcionado. Si tiene otra consulta puede llamar a nuestra central telef\xF3nica (01) 7151588 que estaremos gustosos en atenderlo.")), __jsx("form", {
    id: "form_data_1",
    name: "form_data_1",
    onSubmit: handleSubmit(onSubmit),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "block-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 111,
      columnNumber: 17
    }
  }, __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 21
    }
  }, "Datos del padre o madre"), __jsx("input", {
    type: "hidden",
    id: "name_img",
    name: "name_img",
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 21
    }
  }), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dpm_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121,
      columnNumber: 25
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dpm_nombre",
    name: "dpm_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 25
    }
  }), errors.dpm_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 47
    }
  }, errors.dpm_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 131,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dpm_nacionalidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 132,
      columnNumber: 25
    }
  }, "Nacionalidad"), __jsx("input", {
    type: "text",
    id: "dpm_nacionalidad",
    name: "dpm_nacionalidad",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 133,
      columnNumber: 25
    }
  }), errors.dpm_nacionalidad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 53
    }
  }, errors.dpm_nacionalidad.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 142,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144,
      columnNumber: 25
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 146,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dpm_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 33
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "dpm_tipo_doc",
    onChange: e => document.getElementById('dpm_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 33
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 155,
      columnNumber: 37
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 156,
      columnNumber: 37
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 157,
      columnNumber: 37
    }
  }, "Pasaporte")), errors.dpm_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 159,
      columnNumber: 57
    }
  }, errors.dpm_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 162,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dpm_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 163,
      columnNumber: 33
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "dpm_num_doc",
    name: "dpm_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 33
    }
  }), errors.dpm_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166,
      columnNumber: 56
    }
  }, errors.dpm_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 173,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dpm_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 174,
      columnNumber: 25
    }
  }, "Domicilio:"), __jsx("input", {
    type: "text",
    id: "dpm_domicilio",
    name: "dpm_domicilio",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 25
    }
  }), errors.dpm_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 180,
      columnNumber: 50
    }
  }, errors.dpm_domicilio.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184,
      columnNumber: 21
    }
  }, "Datos del menor"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 186,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dm_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 187,
      columnNumber: 25
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dm_nombre",
    name: "dm_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188,
      columnNumber: 25
    }
  }), errors.dm_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194,
      columnNumber: 46
    }
  }, errors.dm_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 199,
      columnNumber: 25
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 201,
      columnNumber: 29
    }
  }, __jsx("label", {
    htmlFor: "dm_edad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 33
    }
  }, "Edad:"), __jsx("select", {
    className: "form-item",
    name: "dm_edad",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203,
      columnNumber: 33
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "0",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 209,
      columnNumber: 37
    }
  }, "Menor a 1 a\xF1o"), Array.apply(1, Array(17)).map(function (x, i) {
    return __jsx("option", {
      key: i + 1,
      value: i + 1,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 211,
        columnNumber: 48
      }
    }, i + 1 <= 9 ? '0' + (i + 1) + ' años' : i + 1 + ' años');
  })), errors.dm_edad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 214,
      columnNumber: 52
    }
  }, errors.dm_edad.message)))), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 21
    }
  }, "Datos del viaje"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 224,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dv_lugar",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 225,
      columnNumber: 25
    }
  }, "Lugar del viaje:"), __jsx("input", {
    type: "text",
    id: "dv_lugar",
    name: "dv_lugar",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 226,
      columnNumber: 25
    }
  }), errors.dv_lugar && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 232,
      columnNumber: 45
    }
  }, errors.dv_lugar.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 235,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dv_duracion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 236,
      columnNumber: 25
    }
  }, "Duraci\xF3n:"), __jsx("input", {
    type: "text",
    id: "dv_duracion",
    name: "dv_duracion",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 25
    }
  }), errors.dv_duracion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 242,
      columnNumber: 48
    }
  }, errors.dv_duracion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 245,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dv_observaciones",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246,
      columnNumber: 25
    }
  }, "Observaciones:"), __jsx("input", {
    type: "text",
    id: "dv_observaciones",
    name: "dv_observaciones",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 247,
      columnNumber: 25
    }
  }), errors.dv_observaciones && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253,
      columnNumber: 53
    }
  }, errors.dv_observaciones.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 258,
      columnNumber: 21
    }
  }, "Datos de contacto"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 260,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dc_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 261,
      columnNumber: 25
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dc_nombre",
    name: "dc_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 262,
      columnNumber: 25
    }
  }), errors.dc_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 268,
      columnNumber: 46
    }
  }, errors.dc_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 271,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dc_telefono",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 272,
      columnNumber: 25
    }
  }, "Tel\xE9fonos:"), __jsx("input", {
    type: "text",
    id: "dc_telefono",
    name: "dc_telefono",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 273,
      columnNumber: 25
    }
  }), errors.dc_telefono && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 279,
      columnNumber: 48
    }
  }, errors.dc_telefono.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 282,
      columnNumber: 21
    }
  }, __jsx("label", {
    htmlFor: "dc_email",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 283,
      columnNumber: 25
    }
  }, "Email:"), __jsx("input", {
    type: "text",
    id: "dc_email",
    name: "dc_email",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio",
      pattern: {
        value: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        message: "Ingresar un Email valido"
      }
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 284,
      columnNumber: 25
    }
  }), errors.dc_email && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 294,
      columnNumber: 45
    }
  }, errors.dc_email.message)), __jsx(_components_form_payment__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 297,
      columnNumber: 21
    }
  }), __jsx("div", {
    className: "box-form box-file-img box-form-mg-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 299,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 300,
      columnNumber: 25
    }
  }, "Comprobante de pago (opcional):"), __jsx("label", {
    className: "form-item",
    id: "comprobante_img_place",
    htmlFor: "comprobante_img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 301,
      columnNumber: 25
    }
  }, "Adjuntar voucher"), __jsx("input", {
    type: "file",
    id: "comprobante_img",
    name: "comprobante_img",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    accept: ".jpg, .jpeg, .png",
    onChange: e => fileOnChange(e),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 302,
      columnNumber: 25
    }
  })), __jsx("button", {
    type: "submit",
    className: "button",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 309,
      columnNumber: 21
    }
  }, "Enviar tr\xE1mite"))));
};

/* harmony default export */ __webpack_exports__["default"] = (AutorizacionViajeNacional);

/***/ }),

/***/ "./components/tramites-forms/constitucion-de-empresas.js":
/*!***************************************************************!*\
  !*** ./components/tramites-forms/constitucion-de-empresas.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "react-hook-form");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contacto/popup-thanks */ "./components/contacto/popup-thanks.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./config.js");
/* harmony import */ var _components_form_payment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/form-payment */ "./components/form-payment.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_7__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\tramites-forms\\constitucion-de-empresas.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;









const ConstitucionEmpresas = props => {
  const {
    register,
    errors,
    handleSubmit
  } = Object(react_hook_form__WEBPACK_IMPORTED_MODULE_2__["useForm"])();
  const {
    0: showForm,
    1: setShowForm
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: formBody,
    1: setFormBody
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: fileImg,
    1: setFileImg
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile,
    1: setCountFile
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: fileImg2,
    1: setFileImg2
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile2,
    1: setCountFile2
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    var country = 'Peru',
        countryCode = "+51";
    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).click(function (e) {
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).closest('.container-flag').length <= 0 && !jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('flat-item')) jquery__WEBPACK_IMPORTED_MODULE_3___default()('.list-flag').fadeOut(150);
    });
    /********/

    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).on('click', function (e) {
      //----------
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('item-popup')) {
        setShowForm(false);
      }

      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('int-pscroll')) {
        setShowForm(false);
      }
    });
  }, []);

  const alphanumericValues = str => {
    return str.toString() // Cast to string
    .toLowerCase() // Convert the string to lowercase letters
    .normalize('NFD') // The normalize() method returns the Unicode Normalization Form of a given string.
    .trim() // Remove whitespace from both sides of a string
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-');
  };

  const formReset = () => {
    setFileImg([]);
    setCountFile([]); //document.querySelector("#form-data").reset()

    document.getElementsByTagName("form")[0].reset();
    document.querySelector('#comprobante_img_place').innerHTML = "Adjuntar voucher";
    document.querySelector('#sle_estatuto_place').innerHTML = "Adjuntar archivo";
  };

  const fileOnChange = e => {
    if (e.target.files.length > 0) {
      let newNameDate = new Date().getTime();
      let file = e.target.files[0];
      let newName1 = file.name.split('.').shift();
      let newName = alphanumericValues(newName1);
      let blob = file.slice(0, file.size, file.type);
      let newFile = new File([blob], newName + '-' + newNameDate + '.' + file.type.split('/')[1], {
        type: file.type
      });
      document.getElementById('comprobante_img_place').innerHTML = e.target.value.split(/(\\|\/)/g).pop();
      setFileImg(newFile);
      setCountFile([...countFile, newName]);
      document.querySelector('#name_img').value = newName + '-' + newNameDate + '.' + file.type.split('/')[1];
    }
  };

  const fileOnChange2 = e => {
    if (e.target.files.length > 0) {
      let newNameDate = new Date().getTime();
      let file = e.target.files[0];
      let newName1 = file.name.split('.').shift();
      let newName = alphanumericValues(newName1);
      let blob = file.slice(0, file.size, file.type);
      let newFile = new File([blob], newName + '-' + newNameDate + '.' + file.type.split('/')[1], {
        type: file.type
      });
      console.log(newFile);
      document.getElementById('sle_estatuto_place').innerHTML = e.target.value.split(/(\\|\/)/g).pop();
      setFileImg2(newFile);
      setCountFile2([...countFile2, newName]);
      document.querySelector('#name_img_2').value = newName + '-' + newNameDate + '.' + file.type.split('/')[1];
    }
  };

  const onSubmit = data => {
    //console.log(data)
    //return false
    if (countFile.length > 0) {
      var formData = new FormData();

      if (countFile2.length > 0) {
        formData.append("demo", fileImg2);
      }

      formData.append("demo", fileImg);
      axios__WEBPACK_IMPORTED_MODULE_7___default.a.post(_config__WEBPACK_IMPORTED_MODULE_5__["default"].URL_BACK + '/upload-only-img', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(res => {
        console.log('Exito upload');
      }).catch(err => {
        console.error('Error');
      });
    }

    let sendValue = data;
    axios__WEBPACK_IMPORTED_MODULE_7___default()({
      method: 'post',
      url: _config__WEBPACK_IMPORTED_MODULE_5__["default"].API_PATH + '/p-ce',
      data: sendValue
    }).then(function (response) {
      console.log('Exito');
      setShowForm(true);
      formReset();
    });
  };

  const triggerClosePopup = () => {
    setShowForm(false);
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, showForm && __jsx(_contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__["default"], {
    eClick: triggerClosePopup,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 17
    }
  }, __jsx("h3", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 155,
      columnNumber: 21
    }
  }, "\xA1Gracias!"), __jsx("p", {
    className: "description",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 156,
      columnNumber: 21
    }
  }, "Hemos recibido la solicitud de su tr\xE1mite, Constituci\xF3n de empresas. Uno de nuestros asesores legales se comunicar\xE1 usted a la brevedad para continuar con el proceso. Te estaremos contactando pronto. No olvide revisar su cuenta de email (bandeja de entrada y o Spam) en donde le hemos enviado toda la informaci\xF3n que nos ha proporcionado. Si tiene otra consulta puede llamar a nuestra central telef\xF3nica (01) 7151588 que estaremos gustosos en atenderlo.")), __jsx("div", {
    className: "section tramite-form with-bg-img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 162,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "caption caption-static caption-type-1 caption-type-2 " + props.width,
    style: {
      marginTop: 0
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 165,
      columnNumber: 25
    }
  }, __jsx("div", {
    className: "parent-title-2 start-xs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166,
      columnNumber: 29
    }
  }, __jsx("h2", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 167,
      columnNumber: 33
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 167,
      columnNumber: 37
    }
  }, "Constituci\xF3n de empresas"))), __jsx("form", {
    onSubmit: handleSubmit(onSubmit),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 171,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "block-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 173,
      columnNumber: 33
    }
  }, __jsx("input", {
    type: "hidden",
    id: "name_img",
    name: "name_img",
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 37
    }
  }), __jsx("input", {
    type: "hidden",
    id: "name_img_2",
    name: "name_img_2",
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181,
      columnNumber: 37
    }
  }), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 187,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "tipo_sociedad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188,
      columnNumber: 41
    }
  }, "Por favor selecciona el ", __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188,
      columnNumber: 96
    }
  }, "tipo de sociedad:")), __jsx("select", {
    className: "form-item",
    name: "tipo_sociedad",
    id: "tipo_sociedad",
    onChange: e => setFormBody(formBody ? false : true),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197,
      columnNumber: 45
    }
  }, "Tipo de sociedad"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 198,
      columnNumber: 45
    }
  }, "Sociedad an\xF3nima S.A."), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 199,
      columnNumber: 45
    }
  }, "Sociedad an\xF3nima cerrada S.A.C."), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 200,
      columnNumber: 45
    }
  }, "Sociedad de responsabilidad limitada S.R.L"), __jsx("option", {
    value: "4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 201,
      columnNumber: 45
    }
  }, "Empresa Individual de responsabilidad limitada E.I.R.L."), __jsx("option", {
    value: "5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 45
    }
  }, "Sociedad colectiva")), errors.tipo_sociedad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 204,
      columnNumber: 66
    }
  }, errors.tipo_sociedad.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 208,
      columnNumber: 37
    }
  }, "Constituyentes:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co_cantidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 211,
      columnNumber: 41
    }
  }, "Cantidad:"), __jsx("select", {
    className: "form-item",
    id: "co_cantidad",
    name: "co_cantidad",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 212,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 219,
      columnNumber: 45
    }
  }, "Seleccione el n\xFAmero de socios"), Array.apply(1, Array(20)).map(function (x, i) {
    return __jsx("option", {
      key: i + 1,
      value: i + 1,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 221,
        columnNumber: 56
      }
    }, i + 1 <= 9 ? '0' + (i + 1) : i + 1);
  })), errors.co_cantidad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 224,
      columnNumber: 64
    }
  }, errors.co_cantidad.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 229,
      columnNumber: 37
    }
  }, "Constituyente 1:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 231,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co1_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 232,
      columnNumber: 41
    }
  }, "Nombre completo:"), __jsx("input", {
    type: "text",
    id: "co1_nombre",
    name: "co1_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 233,
      columnNumber: 41
    }
  }), errors.co1_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239,
      columnNumber: 63
    }
  }, errors.co1_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 242,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "co1_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 247,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "co1_tipo_doc",
    onChange: e => document.getElementById('co1_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 255,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 256,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.co1_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 259,
      columnNumber: 73
    }
  }, errors.co1_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 262,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "co1_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 263,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "co1_num_doc",
    name: "co1_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 264,
      columnNumber: 49
    }
  }), errors.co1_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 266,
      columnNumber: 72
    }
  }, errors.co1_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 273,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co1_estado_civil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 274,
      columnNumber: 41
    }
  }, "Estado civil:"), __jsx("select", {
    className: "form-item",
    id: "co1_estado_civil",
    name: "co1_estado_civil",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 275,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 282,
      columnNumber: 45
    }
  }, "Seleccione un estado"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 283,
      columnNumber: 45
    }
  }, "Soltero"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 284,
      columnNumber: 45
    }
  }, "Casado"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 285,
      columnNumber: 45
    }
  }, "divorciado"), __jsx("option", {
    value: "4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 286,
      columnNumber: 45
    }
  }, "Viudo")), errors.co1_estado_civil && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 288,
      columnNumber: 69
    }
  }, errors.co1_estado_civil.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 291,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co1_nacionalidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 292,
      columnNumber: 41
    }
  }, "Nacionalidad"), __jsx("input", {
    type: "text",
    id: "co1_nacionalidad",
    name: "co1_nacionalidad",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 293,
      columnNumber: 41
    }
  }), errors.co1_nacionalidad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 299,
      columnNumber: 69
    }
  }, errors.co1_nacionalidad.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 302,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co1_direccion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 303,
      columnNumber: 41
    }
  }, "Direcci\xF3n"), __jsx("input", {
    type: "text",
    id: "co1_direccion",
    name: "co1_direccion",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 304,
      columnNumber: 41
    }
  }), errors.co1_direccion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 309,
      columnNumber: 66
    }
  }, errors.co1_direccion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 312,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co1_ocupacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 313,
      columnNumber: 41
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "co1_ocupacion",
    name: "co1_ocupacion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 314,
      columnNumber: 41
    }
  }), errors.co1_ocupacion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 320,
      columnNumber: 66
    }
  }, errors.co1_ocupacion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 323,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co1_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 324,
      columnNumber: 41
    }
  }, "C\xF3nyuge (opcional):"), __jsx("input", {
    type: "text",
    id: "co1_conyuge",
    name: "co1_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 325,
      columnNumber: 41
    }
  })), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 335,
      columnNumber: 37
    }
  }, "Sobre la empresa:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sle_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 338,
      columnNumber: 41
    }
  }, "Nombres de la empresa:"), __jsx("input", {
    type: "text",
    id: "sle_nombre",
    name: "sle_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339,
      columnNumber: 41
    }
  }), errors.sle_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 345,
      columnNumber: 63
    }
  }, errors.sle_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 348,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sle_sigla",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 349,
      columnNumber: 41
    }
  }, "Sigla (opcional):"), __jsx("input", {
    type: "text",
    id: "sle_sigla",
    name: "sle_sigla",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 350,
      columnNumber: 41
    }
  })), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 358,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sle_capital_social",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 359,
      columnNumber: 41
    }
  }, "Capital social S/.:"), __jsx("input", {
    type: "text",
    id: "sle_capital_social",
    name: "sle_capital_social",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 360,
      columnNumber: 41
    }
  }), errors.sle_capital_social && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 366,
      columnNumber: 71
    }
  }, errors.sle_capital_social.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 369,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sle_division",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 370,
      columnNumber: 41
    }
  }, "Divisi\xF3n de acciones:"), __jsx("textarea", {
    id: "sle_division",
    name: "sle_division",
    className: "form-item item-textarea",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 371,
      columnNumber: 41
    }
  }), errors.sle_division && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 376,
      columnNumber: 65
    }
  }, errors.sle_division.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 379,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sle_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 380,
      columnNumber: 41
    }
  }, "Domicilio de la empresa:"), __jsx("input", {
    type: "text",
    id: "sle_domicilio",
    name: "sle_domicilio",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 381,
      columnNumber: 41
    }
  }), errors.sle_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 387,
      columnNumber: 66
    }
  }, errors.sle_domicilio.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 390,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sle_nombre_gerente",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 391,
      columnNumber: 41
    }
  }, "Nombre del gerente general:"), __jsx("input", {
    type: "text",
    id: "sle_nombre_gerente",
    name: "sle_nombre_gerente",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 392,
      columnNumber: 41
    }
  }), errors.sle_nombre_gerente && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 398,
      columnNumber: 71
    }
  }, errors.sle_nombre_gerente.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 403,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 405,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "sle_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 406,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "sle_tipo_doc",
    onChange: e => document.getElementById('sle_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 407,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 414,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 415,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 416,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.sle_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 418,
      columnNumber: 73
    }
  }, errors.sle_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 421,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "sle_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 422,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "sle_num_doc",
    name: "sle_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 423,
      columnNumber: 49
    }
  }), errors.sle_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 425,
      columnNumber: 72
    }
  }, errors.sle_num_doc.message)))), __jsx("div", {
    className: "box-form box-file-img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 432,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 433,
      columnNumber: 41
    }
  }, "Estatuto de la empresa:"), __jsx("label", {
    className: "form-item",
    id: "sle_estatuto_place",
    htmlFor: "sle_estatuto",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 434,
      columnNumber: 41
    }
  }, "Adjuntar archivo"), __jsx("input", {
    type: "file",
    id: "sle_estatuto",
    name: "sle_estatuto",
    className: "form-item",
    accept: ".doc, .jpg, .jpeg, .pdf",
    onChange: e => fileOnChange2(e),
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 435,
      columnNumber: 41
    }
  }), errors.sle_estatuto && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 441,
      columnNumber: 65
    }
  }, errors.sle_estatuto.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 447,
      columnNumber: 37
    }
  }, "Datos de contacto"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 449,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 450,
      columnNumber: 41
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dc_nombre",
    name: "dc_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 451,
      columnNumber: 41
    }
  }), errors.dc_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 457,
      columnNumber: 62
    }
  }, errors.dc_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 460,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_telefono",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 461,
      columnNumber: 41
    }
  }, "Tel\xE9fonos:"), __jsx("input", {
    type: "text",
    id: "dc_telefono",
    name: "dc_telefono",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 462,
      columnNumber: 41
    }
  }), errors.dc_telefono && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 468,
      columnNumber: 64
    }
  }, errors.dc_telefono.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 471,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_email",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 472,
      columnNumber: 41
    }
  }, "Email:"), __jsx("input", {
    type: "text",
    id: "dc_email",
    name: "dc_email",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio",
      pattern: {
        value: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        message: "Ingresar un Email valido"
      }
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 473,
      columnNumber: 41
    }
  }), errors.dc_email && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 483,
      columnNumber: 61
    }
  }, errors.dc_email.message)), __jsx(_components_form_payment__WEBPACK_IMPORTED_MODULE_6__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 486,
      columnNumber: 37
    }
  }), __jsx("div", {
    className: "box-form box-file-img box-form-mg-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 488,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 489,
      columnNumber: 41
    }
  }, "Comprobante de pago (opcional):"), __jsx("label", {
    className: "form-item",
    id: "comprobante_img_place",
    htmlFor: "comprobante_img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 490,
      columnNumber: 41
    }
  }, "Adjuntar voucher"), __jsx("input", {
    type: "file",
    id: "comprobante_img",
    name: "comprobante_img",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    accept: ".jpg, .jpeg, .png",
    onChange: e => fileOnChange(e),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 491,
      columnNumber: 41
    }
  })), __jsx("button", {
    type: "submit",
    className: "button",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 498,
      columnNumber: 37
    }
  }, "Enviar tr\xE1mite")))))));
};

/* harmony default export */ __webpack_exports__["default"] = (ConstitucionEmpresas);

/***/ }),

/***/ "./components/tramites-forms/poderes.js":
/*!**********************************************!*\
  !*** ./components/tramites-forms/poderes.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "react-hook-form");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contacto/popup-thanks */ "./components/contacto/popup-thanks.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./config.js");
/* harmony import */ var _components_form_payment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/form-payment */ "./components/form-payment.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_7__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\tramites-forms\\poderes.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;









const Poderes = props => {
  const {
    register,
    errors,
    handleSubmit
  } = Object(react_hook_form__WEBPACK_IMPORTED_MODULE_2__["useForm"])();
  const {
    0: showForm,
    1: setShowForm
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: formBody,
    1: setFormBody
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: fileImg,
    1: setFileImg
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile,
    1: setCountFile
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    var country = 'Peru',
        countryCode = "+51";
    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).click(function (e) {
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).closest('.container-flag').length <= 0 && !jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('flat-item')) jquery__WEBPACK_IMPORTED_MODULE_3___default()('.list-flag').fadeOut(150);
    });
    /********/

    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).on('click', function (e) {
      //----------
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('item-popup')) {
        setShowForm(false);
      }

      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('int-pscroll')) {
        setShowForm(false);
      }
    });
  }, []);

  const alphanumericValues = str => {
    return str.toString() // Cast to string
    .toLowerCase() // Convert the string to lowercase letters
    .normalize('NFD') // The normalize() method returns the Unicode Normalization Form of a given string.
    .trim() // Remove whitespace from both sides of a string
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-');
  };

  const formReset = () => {
    setFileImg([]);
    setCountFile([]); //document.querySelector("#form-data").reset()

    document.getElementsByTagName("form")[0].reset();
    document.querySelector('#comprobante_img_place').innerHTML = "Adjuntar voucher";
  };

  const fileOnChange = e => {
    if (e.target.files.length > 0) {
      let newNameDate = new Date().getTime();
      let file = e.target.files[0];
      let newName1 = file.name.split('.').shift();
      let newName = alphanumericValues(newName1);
      let blob = file.slice(0, file.size, file.type);
      let newFile = new File([blob], newName + '-' + newNameDate + '.' + file.type.split('/')[1], {
        type: file.type
      });
      document.getElementById('comprobante_img_place').innerHTML = e.target.value.split(/(\\|\/)/g).pop();
      setFileImg(newFile);
      setCountFile([...countFile, newName]);
      document.querySelector('#name_img').value = newName + '-' + newNameDate + '.' + file.type.split('/')[1];
    }
  };

  const onSubmit = data => {
    //console.log(data)    
    //return false
    if (countFile.length > 0) {
      var formData = new FormData();
      formData.append("demo", fileImg);
      axios__WEBPACK_IMPORTED_MODULE_7___default.a.post(_config__WEBPACK_IMPORTED_MODULE_5__["default"].URL_BACK + '/upload-only-img', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(res => {
        console.log('Exito upload');
      }).catch(err => {
        console.error('Error');
      });
    }

    let sendValue = data;
    axios__WEBPACK_IMPORTED_MODULE_7___default()({
      method: 'post',
      url: _config__WEBPACK_IMPORTED_MODULE_5__["default"].API_PATH + '/p-poderes',
      data: sendValue
    }).then(function (response) {
      console.log('exito');
      setShowForm(true);
      formReset();
    });
  };

  const triggerClosePopup = () => {
    setShowForm(false);
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, showForm && __jsx(_contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__["default"], {
    eClick: triggerClosePopup,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 17
    }
  }, __jsx("h3", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 21
    }
  }, "\xA1Gracias!"), __jsx("p", {
    className: "description",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 21
    }
  }, "Hemos recibido la solicitud de su tr\xE1mite, Poderes. Uno de nuestros asesores legales se comunicar\xE1 usted a la brevedad para continuar con el proceso. Te estaremos contactando pronto. No olvide revisar su cuenta de email (bandeja de entrada y o Spam) en donde le hemos enviado toda la informaci\xF3n que nos ha proporcionado. Si tiene otra consulta puede llamar a nuestra central telef\xF3nica (01) 7151588 que estaremos gustosos en atenderlo.")), __jsx("div", {
    className: "section tramite-form with-bg-img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "caption caption-static caption-type-1 caption-type-2 " + props.width,
    style: {
      marginTop: 0
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 25
    }
  }, __jsx("div", {
    className: "parent-title-2 start-xs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 29
    }
  }, __jsx("h2", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 33
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 37
    }
  }, "Poderes"))), __jsx("form", {
    onSubmit: handleSubmit(onSubmit),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "block-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 146,
      columnNumber: 33
    }
  }, __jsx("input", {
    type: "hidden",
    id: "name_img",
    name: "name_img",
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 37
    }
  }), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "tipo_poder",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 155,
      columnNumber: 41
    }
  }, "Por favor selecciona el ", __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 155,
      columnNumber: 93
    }
  }, "tipo de poder:")), __jsx("select", {
    className: "form-item",
    name: "tipo_poder",
    id: "tipo_poder",
    onChange: e => setFormBody(formBody ? false : true),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 156,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 45
    }
  }, "Elige el tipo de poder"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 165,
      columnNumber: 45
    }
  }, "Carta Poder"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166,
      columnNumber: 45
    }
  }, "Fuera de Registro"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 167,
      columnNumber: 45
    }
  }, "Escritura P\xFAblica")), errors.tipo_poder && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 169,
      columnNumber: 63
    }
  }, errors.tipo_poder.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 173,
      columnNumber: 37
    }
  }, "Poderdantes:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "pod_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 176,
      columnNumber: 41
    }
  }, "Nombre completo:"), __jsx("input", {
    type: "text",
    id: "pod_nombre",
    name: "pod_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177,
      columnNumber: 41
    }
  }), errors.pod_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183,
      columnNumber: 63
    }
  }, errors.pod_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 186,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 190,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "pod_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 191,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "pod_tipo_doc",
    onChange: e => document.getElementById('pod_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 199,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 200,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 201,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.pod_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203,
      columnNumber: 73
    }
  }, errors.pod_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 206,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "pod_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 207,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "pod_num_doc",
    name: "pod_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 208,
      columnNumber: 49
    }
  }), errors.pod_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210,
      columnNumber: 72
    }
  }, errors.pod_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 217,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "co1_estado_civil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 218,
      columnNumber: 41
    }
  }, "Estado civil:"), __jsx("select", {
    className: "form-item",
    id: "pod_estado_civil",
    name: "pod_estado_civil",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 219,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 226,
      columnNumber: 45
    }
  }, "Seleccione un estado"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 227,
      columnNumber: 45
    }
  }, "Soltero"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 228,
      columnNumber: 45
    }
  }, "Casado"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 229,
      columnNumber: 45
    }
  }, "Divorciado"), __jsx("option", {
    value: "4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 230,
      columnNumber: 45
    }
  }, "Viudo")), errors.pod_estado_civil && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 232,
      columnNumber: 69
    }
  }, errors.pod_estado_civil.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 235,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "pod_nacionalidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 236,
      columnNumber: 41
    }
  }, "Nacionalidad"), __jsx("input", {
    type: "text",
    id: "pod_nacionalidad",
    name: "pod_nacionalidad",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 41
    }
  }), errors.pod_nacionalidad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243,
      columnNumber: 69
    }
  }, errors.pod_nacionalidad.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "pod_direccion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 247,
      columnNumber: 41
    }
  }, "Direcci\xF3n"), __jsx("input", {
    type: "text",
    id: "pod_direccion",
    name: "pod_direccion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248,
      columnNumber: 41
    }
  }), errors.pod_direccion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 254,
      columnNumber: 66
    }
  }, errors.pod_direccion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "pod_ocupacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 258,
      columnNumber: 41
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "pod_ocupacion",
    name: "pod_ocupacion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 259,
      columnNumber: 41
    }
  }), errors.pod_ocupacion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 265,
      columnNumber: 66
    }
  }, errors.pod_ocupacion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 268,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "pod_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 269,
      columnNumber: 41
    }
  }, "C\xF3nyuge (opcional):"), __jsx("input", {
    type: "text",
    id: "pod_conyuge",
    name: "pod_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 270,
      columnNumber: 41
    }
  })), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 277,
      columnNumber: 37
    }
  }, "Apoderados:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 279,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "apod_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 280,
      columnNumber: 41
    }
  }, "Nombre completo:"), __jsx("input", {
    type: "text",
    id: "apod_nombre",
    name: "apod_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 281,
      columnNumber: 41
    }
  }), errors.apod_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 287,
      columnNumber: 64
    }
  }, errors.apod_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 290,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 292,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 294,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "apod_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 295,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "apod_tipo_doc",
    onChange: e => document.getElementById('apod_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 296,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 303,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 304,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 305,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.apod_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 307,
      columnNumber: 74
    }
  }, errors.apod_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 310,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "apod_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 311,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "apod_num_doc",
    name: "apod_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 312,
      columnNumber: 49
    }
  }), errors.apod_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 314,
      columnNumber: 73
    }
  }, errors.apod_num_doc.message)))), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 325,
      columnNumber: 37
    }
  }, "Sobre el poder:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 327,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sep_objeto",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 328,
      columnNumber: 41
    }
  }, "Objeto del poder:"), __jsx("textarea", {
    id: "sep_objeto",
    name: "sep_objeto",
    className: "form-item item-textarea",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 329,
      columnNumber: 41
    }
  }), errors.sep_objeto && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 334,
      columnNumber: 63
    }
  }, errors.sep_objeto.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "sep_facultades",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 338,
      columnNumber: 41
    }
  }, "Facultades:"), __jsx("textarea", {
    id: "sep_facultades",
    name: "sep_facultades",
    className: "form-item item-textarea",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339,
      columnNumber: 41
    }
  }), errors.sep_facultades && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 344,
      columnNumber: 67
    }
  }, errors.sep_facultades.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 350,
      columnNumber: 37
    }
  }, "Datos de contacto"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 352,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 353,
      columnNumber: 41
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dc_nombre",
    name: "dc_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 354,
      columnNumber: 41
    }
  }), errors.dc_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 360,
      columnNumber: 62
    }
  }, errors.dc_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 363,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_telefono",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 364,
      columnNumber: 41
    }
  }, "Tel\xE9fonos:"), __jsx("input", {
    type: "text",
    id: "dc_telefono",
    name: "dc_telefono",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 365,
      columnNumber: 41
    }
  }), errors.dc_telefono && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 371,
      columnNumber: 64
    }
  }, errors.dc_telefono.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 374,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_email",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 375,
      columnNumber: 41
    }
  }, "Email:"), __jsx("input", {
    type: "text",
    id: "dc_email",
    name: "dc_email",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio",
      pattern: {
        value: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        message: "Ingresar un Email valido"
      }
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 376,
      columnNumber: 41
    }
  }), errors.dc_email && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 386,
      columnNumber: 61
    }
  }, errors.dc_email.message)), __jsx(_components_form_payment__WEBPACK_IMPORTED_MODULE_6__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 389,
      columnNumber: 37
    }
  }), __jsx("div", {
    className: "box-form box-file-img box-form-mg-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 391,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 392,
      columnNumber: 41
    }
  }, "Comprobante de pago (opcional):"), __jsx("label", {
    className: "form-item",
    id: "comprobante_img_place",
    htmlFor: "comprobante_img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 393,
      columnNumber: 41
    }
  }, "Adjuntar voucher"), __jsx("input", {
    type: "file",
    id: "comprobante_img",
    name: "comprobante_img",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    accept: ".jpg, .jpeg, .png",
    onChange: e => fileOnChange(e),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 394,
      columnNumber: 41
    }
  })), __jsx("button", {
    type: "submit",
    className: "button",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401,
      columnNumber: 37
    }
  }, "Enviar tr\xE1mite")))))));
};

/* harmony default export */ __webpack_exports__["default"] = (Poderes);

/***/ }),

/***/ "./components/tramites-forms/transferencia-inmobiliaria.js":
/*!*****************************************************************!*\
  !*** ./components/tramites-forms/transferencia-inmobiliaria.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "react-hook-form");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contacto/popup-thanks */ "./components/contacto/popup-thanks.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./config.js");
/* harmony import */ var _components_form_payment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/form-payment */ "./components/form-payment.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_7__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\tramites-forms\\transferencia-inmobiliaria.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;









const TransferenciaInmobiliaria = props => {
  const {
    register,
    errors,
    handleSubmit
  } = Object(react_hook_form__WEBPACK_IMPORTED_MODULE_2__["useForm"])();
  const {
    0: showForm,
    1: setShowForm
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: formBody,
    1: setFormBody
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: formBody2,
    1: setFormBody2
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: showDataCasado,
    1: setShowDataCasado
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: showDataCasado2,
    1: setShowDataCasado2
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: fileImg,
    1: setFileImg
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile,
    1: setCountFile
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    var country = 'Peru',
        countryCode = "+51";
    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).click(function (e) {
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).closest('.container-flag').length <= 0 && !jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('flat-item')) jquery__WEBPACK_IMPORTED_MODULE_3___default()('.list-flag').fadeOut(150);
    });
    /********/

    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).on('click', function (e) {
      //----------
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('item-popup')) {
        setShowForm(false);
      }

      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('int-pscroll')) {
        setShowForm(false);
      }
    });
  }, []);

  const alphanumericValues = str => {
    return str.toString() // Cast to string
    .toLowerCase() // Convert the string to lowercase letters
    .normalize('NFD') // The normalize() method returns the Unicode Normalization Form of a given string.
    .trim() // Remove whitespace from both sides of a string
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-');
  };

  const formReset = () => {
    setFileImg([]);
    setCountFile([]); //document.querySelector("#form-data").reset()

    document.getElementsByTagName("form")[0].reset();
    document.querySelector('#comprobante_img_place').innerHTML = "Adjuntar voucher";
  };

  const fileOnChange = e => {
    if (e.target.files.length > 0) {
      let newNameDate = new Date().getTime();
      let file = e.target.files[0];
      let newName1 = file.name.split('.').shift();
      let newName = alphanumericValues(newName1);
      let blob = file.slice(0, file.size, file.type);
      let newFile = new File([blob], newName + '-' + newNameDate + '.' + file.type.split('/')[1], {
        type: file.type
      });
      document.getElementById('comprobante_img_place').innerHTML = e.target.value.split(/(\\|\/)/g).pop();
      setFileImg(newFile);
      setCountFile([...countFile, newName]);
      document.querySelector('#name_img').value = newName + '-' + newNameDate + '.' + file.type.split('/')[1];
    }
  };

  const onSubmit = data => {
    console.log(data); //return false

    if (countFile.length > 0) {
      var formData = new FormData();
      formData.append("demo", fileImg);
      axios__WEBPACK_IMPORTED_MODULE_7___default.a.post(_config__WEBPACK_IMPORTED_MODULE_5__["default"].URL_BACK + '/upload-only-img', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(res => {
        console.log('Exito upload');
      }).catch(err => {
        console.error('Error');
      });
    }

    let sendValue = data;
    axios__WEBPACK_IMPORTED_MODULE_7___default()({
      method: 'post',
      url: _config__WEBPACK_IMPORTED_MODULE_5__["default"].API_PATH + '/p-ti',
      data: sendValue
    }).then(function (response) {
      console.log('Exito');
      setShowForm(true);
      formReset();
    });
  };

  const triggerClosePopup = () => {
    setShowForm(false);
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, showForm && __jsx(_contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__["default"], {
    eClick: triggerClosePopup,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135,
      columnNumber: 17
    }
  }, __jsx("h3", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136,
      columnNumber: 21
    }
  }, "\xA1Gracias!"), __jsx("p", {
    className: "description",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137,
      columnNumber: 21
    }
  }, "Hemos recibido la solicitud de su tr\xE1mite, Transferencia inmobiliaria. Uno de nuestros asesores legales se comunicar\xE1 usted a la brevedad para continuar con el proceso. Te estaremos contactando pronto. No olvide revisar su cuenta de email (bandeja de entrada y o Spam) en donde le hemos enviado toda la informaci\xF3n que nos ha proporcionado. Si tiene otra consulta puede llamar a nuestra central telef\xF3nica (01) 7151588 que estaremos gustosos en atenderlo.")), __jsx("div", {
    className: "section tramite-form with-bg-img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 145,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "caption caption-static caption-type-1 caption-type-2 " + props.width,
    style: {
      marginTop: 0
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 146,
      columnNumber: 25
    }
  }, __jsx("div", {
    className: "parent-title-2 start-xs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 29
    }
  }, __jsx("h2", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 33
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 37
    }
  }, "Transferencias Inmobiliarias"))), __jsx("form", {
    onSubmit: handleSubmit(onSubmit),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 152,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "block-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 33
    }
  }, __jsx("input", {
    type: "hidden",
    id: "name_img",
    name: "name_img",
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 156,
      columnNumber: 37
    }
  }), __jsx("div", {
    style: {
      marginTop: 20
    },
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 162,
      columnNumber: 37
    }
  }, "Vendedor:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_tipo_persona",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 165,
      columnNumber: 41
    }
  }, "Tipo de persona:"), __jsx("select", {
    className: "form-item",
    name: "ven_tipo_persona",
    id: "ven_tipo_persona",
    onChange: e => setFormBody(formBody ? false : true),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 174,
      columnNumber: 45
    }
  }, "Persona Natural"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 45
    }
  }, "Persona Juridica")), errors.ven_tipo_persona && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177,
      columnNumber: 69
    }
  }, errors.ven_tipo_persona.message)), !formBody && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 182,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_ruc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183,
      columnNumber: 49
    }
  }, "RUC:"), __jsx("input", {
    type: "text",
    id: "ven_ruc",
    name: "ven_ruc",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184,
      columnNumber: 49
    }
  }), errors.ven_ruc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189,
      columnNumber: 68
    }
  }, errors.ven_ruc.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_partida",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193,
      columnNumber: 49
    }
  }, "Partida registral:"), __jsx("input", {
    type: "text",
    id: "ven_partida",
    name: "ven_partida",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194,
      columnNumber: 49
    }
  }), errors.ven_partida && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 199,
      columnNumber: 72
    }
  }, errors.ven_partida.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_lugar",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203,
      columnNumber: 49
    }
  }, "Lugar de inscripci\xF3n:"), __jsx("input", {
    type: "text",
    id: "ven_lugar",
    name: "ven_lugar",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 204,
      columnNumber: 49
    }
  }), errors.ven_lugar && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210,
      columnNumber: 70
    }
  }, errors.ven_lugar.message))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 215,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 216,
      columnNumber: 41
    }
  }, "Nombre completo:"), __jsx("input", {
    type: "text",
    id: "ven_nombre",
    name: "ven_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 217,
      columnNumber: 41
    }
  }), errors.ven_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 223,
      columnNumber: 63
    }
  }, errors.ven_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 226,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 228,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 230,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 231,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "ven_tipo_doc",
    onChange: e => document.getElementById('ven_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 232,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 240,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 241,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.ven_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243,
      columnNumber: 73
    }
  }, errors.ven_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 247,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "ven_num_doc",
    name: "ven_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248,
      columnNumber: 49
    }
  }), errors.ven_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 250,
      columnNumber: 72
    }
  }, errors.ven_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_ocupacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 258,
      columnNumber: 41
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "ven_ocupacion",
    name: "ven_ocupacion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 259,
      columnNumber: 41
    }
  }), errors.ven_ocupacion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 265,
      columnNumber: 66
    }
  }, errors.ven_ocupacion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 268,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 269,
      columnNumber: 41
    }
  }, "Domicilio:"), __jsx("input", {
    type: "text",
    id: "ven_domicilio",
    name: "ven_domicilio",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 270,
      columnNumber: 41
    }
  }), errors.ven_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 276,
      columnNumber: 66
    }
  }, errors.ven_domicilio.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 279,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_estado_civil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 280,
      columnNumber: 41
    }
  }, "Estado civil:"), __jsx("select", {
    className: "form-item",
    id: "ven_estado_civil",
    name: "ven_estado_civil",
    onChange: e => e.target.value == 2 ? setShowDataCasado(true) : setShowDataCasado(false),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 281,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 289,
      columnNumber: 45
    }
  }, "Seleccione un estado"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 290,
      columnNumber: 45
    }
  }, "Soltero"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 291,
      columnNumber: 45
    }
  }, "Casado"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 292,
      columnNumber: 45
    }
  }, "Divorciado"), __jsx("option", {
    value: "4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 293,
      columnNumber: 45
    }
  }, "Viudo")), errors.ven_estado_civil && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 295,
      columnNumber: 69
    }
  }, errors.ven_estado_civil.message)), showDataCasado && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 300,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_nombre_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 301,
      columnNumber: 49
    }
  }, "Nombre del conyuge:"), __jsx("input", {
    type: "text",
    id: "ven_nombre_conyuge",
    name: "ven_nombre_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 302,
      columnNumber: 49
    }
  }), errors.ven_nombre_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 308,
      columnNumber: 79
    }
  }, errors.ven_nombre_conyuge.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 311,
      columnNumber: 45
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 313,
      columnNumber: 49
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 315,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "ven_tipo_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 316,
      columnNumber: 57
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "ven_tipo_doc_conyuge",
    onChange: e => document.getElementById('ven_num_doc_conyuge').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 317,
      columnNumber: 57
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 324,
      columnNumber: 61
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 325,
      columnNumber: 61
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 326,
      columnNumber: 61
    }
  }, "Pasaporte")), errors.ven_tipo_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 328,
      columnNumber: 89
    }
  }, errors.ven_tipo_doc_conyuge.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 331,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "ven_num_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 332,
      columnNumber: 57
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "ven_num_doc_conyuge",
    name: "ven_num_doc_conyuge",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 333,
      columnNumber: 57
    }
  }), errors.ven_num_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 335,
      columnNumber: 88
    }
  }, errors.ven_num_doc_conyuge.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 342,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_ocupacion_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 343,
      columnNumber: 49
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "ven_ocupacion_conyuge",
    name: "ven_ocupacion_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 344,
      columnNumber: 49
    }
  }), errors.ven_ocupacion_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 350,
      columnNumber: 82
    }
  }, errors.ven_ocupacion_conyuge.message))), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 360,
      columnNumber: 37
    }
  }, "Comprador:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 362,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_tipo_persona",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 363,
      columnNumber: 41
    }
  }, "Tipo de persona:"), __jsx("select", {
    className: "form-item",
    name: "com_tipo_persona",
    id: "com_tipo_persona",
    onChange: e => setFormBody2(formBody2 ? false : true),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 364,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 372,
      columnNumber: 45
    }
  }, "Persona Natural"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 373,
      columnNumber: 45
    }
  }, "Persona Juridica")), errors.com_tipo_persona && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 375,
      columnNumber: 69
    }
  }, errors.com_tipo_persona.message)), !formBody2 && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 380,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_ruc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 381,
      columnNumber: 49
    }
  }, "RUC:"), __jsx("input", {
    type: "text",
    id: "com_ruc",
    name: "com_ruc",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 382,
      columnNumber: 49
    }
  }), errors.com_ruc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 387,
      columnNumber: 68
    }
  }, errors.com_ruc.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 390,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_partida",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 391,
      columnNumber: 49
    }
  }, "Partida registral:"), __jsx("input", {
    type: "text",
    id: "com_partida",
    name: "com_partida",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 392,
      columnNumber: 49
    }
  }), errors.com_partida && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 398,
      columnNumber: 72
    }
  }, errors.com_partida.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_lugar",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 402,
      columnNumber: 49
    }
  }, "Lugar de inscripci\xF3n:"), __jsx("input", {
    type: "text",
    id: "com_lugar",
    name: "com_lugar",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 403,
      columnNumber: 49
    }
  }), errors.com_lugar && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 409,
      columnNumber: 70
    }
  }, errors.com_lugar.message))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 414,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 415,
      columnNumber: 41
    }
  }, "Nombre completo:"), __jsx("input", {
    type: "text",
    id: "com_nombre",
    name: "com_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 416,
      columnNumber: 41
    }
  }), errors.com_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 422,
      columnNumber: 63
    }
  }, errors.com_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 425,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 427,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 429,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 430,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "com_tipo_doc",
    onChange: e => document.getElementById('com_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 431,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 438,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 439,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 440,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.com_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 442,
      columnNumber: 73
    }
  }, errors.com_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 445,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 446,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "com_num_doc",
    name: "com_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 447,
      columnNumber: 49
    }
  }), errors.com_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 449,
      columnNumber: 72
    }
  }, errors.com_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 456,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_ocupacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 457,
      columnNumber: 41
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "com_ocupacion",
    name: "com_ocupacion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 458,
      columnNumber: 41
    }
  }), errors.com_ocupacion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 464,
      columnNumber: 66
    }
  }, errors.com_ocupacion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 467,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 468,
      columnNumber: 41
    }
  }, "Domicilio:"), __jsx("input", {
    type: "text",
    id: "com_domicilio",
    name: "com_domicilio",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 469,
      columnNumber: 41
    }
  }), errors.com_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 475,
      columnNumber: 66
    }
  }, errors.com_domicilio.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 478,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_estado_civil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 479,
      columnNumber: 41
    }
  }, "Estado civil:"), __jsx("select", {
    className: "form-item",
    id: "com_estado_civil",
    name: "com_estado_civil",
    onChange: e => e.target.value == 2 ? setShowDataCasado2(true) : setShowDataCasado2(false),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 480,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 488,
      columnNumber: 45
    }
  }, "Seleccione un estado"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 489,
      columnNumber: 45
    }
  }, "Soltero"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 490,
      columnNumber: 45
    }
  }, "Casado"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 491,
      columnNumber: 45
    }
  }, "Divorciado"), __jsx("option", {
    value: "4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 492,
      columnNumber: 45
    }
  }, "Viudo")), errors.com_estado_civil && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 494,
      columnNumber: 69
    }
  }, errors.com_estado_civil.message)), showDataCasado2 && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 499,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_nombre_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 500,
      columnNumber: 49
    }
  }, "Nombre del conyuge:"), __jsx("input", {
    type: "text",
    id: "com_nombre_conyuge",
    name: "com_nombre_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 501,
      columnNumber: 49
    }
  }), errors.com_nombre_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 507,
      columnNumber: 79
    }
  }, errors.com_nombre_conyuge.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 510,
      columnNumber: 45
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 512,
      columnNumber: 49
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 514,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "com_tipo_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 515,
      columnNumber: 57
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "com_tipo_doc_conyuge",
    onChange: e => document.getElementById('com_num_doc_conyuge').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 516,
      columnNumber: 57
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 523,
      columnNumber: 61
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 524,
      columnNumber: 61
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 525,
      columnNumber: 61
    }
  }, "Pasaporte")), errors.com_tipo_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 527,
      columnNumber: 89
    }
  }, errors.com_tipo_doc_conyuge.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 530,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "com_num_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 531,
      columnNumber: 57
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "com_num_doc_conyuge",
    name: "com_num_doc_conyuge",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 532,
      columnNumber: 57
    }
  }), errors.com_num_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 534,
      columnNumber: 88
    }
  }, errors.com_num_doc_conyuge.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 541,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_ocupacion_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 542,
      columnNumber: 49
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "com_ocupacion_conyuge",
    name: "com_ocupacion_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 543,
      columnNumber: 49
    }
  }), errors.com_ocupacion_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 549,
      columnNumber: 82
    }
  }, errors.com_ocupacion_conyuge.message))), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 565,
      columnNumber: 37
    }
  }, "Del inmueble:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 567,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "di_cantidad",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 568,
      columnNumber: 41
    }
  }, "N\xFAmero de inmuebles:"), __jsx("select", {
    className: "form-item",
    name: "di_cantidad",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 569,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 575,
      columnNumber: 45
    }
  }, "Seleccionar la cantidad"), Array.apply(1, Array(5)).map(function (x, i) {
    return __jsx("option", {
      key: i + 1,
      value: i + 1,
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 577,
        columnNumber: 56
      }
    }, i + 1 <= 9 ? '0' + (i + 1) : i + 1);
  })), errors.di_cantidad && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 580,
      columnNumber: 64
    }
  }, errors.di_cantidad.message), __jsx("div", {
    className: "form-message",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 582,
      columnNumber: 41
    }
  }, "En caso de tener m\xE1s de un inmueble te solicitaremos los datos por correo.")), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 588,
      columnNumber: 37
    }
  }, "Inmueble 1:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 590,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "in1_direccion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 591,
      columnNumber: 41
    }
  }, "Direcci\xF3n:"), __jsx("input", {
    type: "text",
    id: "in1_direccion",
    name: "in1_direccion",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 592,
      columnNumber: 41
    }
  }), errors.in1_direccion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 597,
      columnNumber: 66
    }
  }, errors.in1_direccion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 600,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "in1_datos_inscripcion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 601,
      columnNumber: 41
    }
  }, "Datos de inscripci\xF3n registral:"), __jsx("input", {
    type: "text",
    id: "in1_datos_inscripcion",
    name: "in1_datos_inscripcion",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 602,
      columnNumber: 41
    }
  }), errors.in1_datos_inscripcion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 607,
      columnNumber: 74
    }
  }, errors.in1_datos_inscripcion.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 613,
      columnNumber: 37
    }
  }, "Condiciones:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 615,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_precio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 616,
      columnNumber: 41
    }
  }, "Precio:"), __jsx("input", {
    type: "text",
    id: "con_precio",
    name: "con_precio",
    className: "form-item",
    placeholder: "Seleccionar la cantidad",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 617,
      columnNumber: 41
    }
  }), errors.con_precio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 623,
      columnNumber: 63
    }
  }, errors.con_precio.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 626,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_moneda",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 627,
      columnNumber: 41
    }
  }, "Moneda:"), __jsx("select", {
    className: "form-item",
    name: "con_moneda",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 628,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 634,
      columnNumber: 45
    }
  }, "Elige soles o d\xF3lares"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 635,
      columnNumber: 45
    }
  }, "Soles"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 636,
      columnNumber: 45
    }
  }, "D\xF3lares")), errors.con_moneda && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 638,
      columnNumber: 63
    }
  }, errors.con_moneda.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 641,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_forma_pago",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 642,
      columnNumber: 41
    }
  }, "Forma de pago:"), __jsx("input", {
    type: "text",
    id: "con_forma_pago",
    name: "con_forma_pago",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 643,
      columnNumber: 41
    }
  }), errors.con_forma_pago && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 648,
      columnNumber: 67
    }
  }, errors.con_forma_pago.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 651,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_fecha_entrega",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 652,
      columnNumber: 41
    }
  }, "Fecha de entrega:"), __jsx("input", {
    type: "text",
    id: "con_fecha_entrega",
    name: "con_fecha_entrega",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 653,
      columnNumber: 41
    }
  }), errors.con_fecha_entrega && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 658,
      columnNumber: 70
    }
  }, errors.con_fecha_entrega.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 661,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_otros_detalles",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 662,
      columnNumber: 41
    }
  }, "Otros detalles:"), __jsx("input", {
    type: "text",
    id: "con_otros_detalles",
    name: "con_otros_detalles",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 663,
      columnNumber: 41
    }
  }), errors.con_otros_detalles && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 668,
      columnNumber: 71
    }
  }, errors.con_otros_detalles.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 677,
      columnNumber: 37
    }
  }, "Datos de contacto"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 679,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 680,
      columnNumber: 41
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dc_nombre",
    name: "dc_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 681,
      columnNumber: 41
    }
  }), errors.dc_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 687,
      columnNumber: 62
    }
  }, errors.dc_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 690,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_telefono",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 691,
      columnNumber: 41
    }
  }, "Tel\xE9fonos:"), __jsx("input", {
    type: "text",
    id: "dc_telefono",
    name: "dc_telefono",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 692,
      columnNumber: 41
    }
  }), errors.dc_telefono && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 698,
      columnNumber: 64
    }
  }, errors.dc_telefono.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 701,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_email",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 702,
      columnNumber: 41
    }
  }, "Email:"), __jsx("input", {
    type: "text",
    id: "dc_email",
    name: "dc_email",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio",
      pattern: {
        value: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        message: "Ingresar un Email valido"
      }
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 703,
      columnNumber: 41
    }
  }), errors.dc_email && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 713,
      columnNumber: 61
    }
  }, errors.dc_email.message)), __jsx(_components_form_payment__WEBPACK_IMPORTED_MODULE_6__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 716,
      columnNumber: 37
    }
  }), __jsx("div", {
    className: "box-form box-file-img box-form-mg-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 718,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 719,
      columnNumber: 41
    }
  }, "Comprobante de pago (opcional):"), __jsx("label", {
    className: "form-item",
    id: "comprobante_img_place",
    htmlFor: "comprobante_img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 720,
      columnNumber: 41
    }
  }, "Adjuntar voucher"), __jsx("input", {
    type: "file",
    id: "comprobante_img",
    name: "comprobante_img",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    accept: ".jpg, .jpeg, .png",
    onChange: e => fileOnChange(e),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 721,
      columnNumber: 41
    }
  })), __jsx("button", {
    type: "submit",
    className: "button",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 728,
      columnNumber: 37
    }
  }, "Enviar tr\xE1mite")))))));
};

/* harmony default export */ __webpack_exports__["default"] = (TransferenciaInmobiliaria);

/***/ }),

/***/ "./components/tramites-forms/transferencia-vehicular.js":
/*!**************************************************************!*\
  !*** ./components/tramites-forms/transferencia-vehicular.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ "react-hook-form");
/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_hook_form__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contacto/popup-thanks */ "./components/contacto/popup-thanks.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./config.js");
/* harmony import */ var _components_form_payment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/form-payment */ "./components/form-payment.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_7__);
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\components\\tramites-forms\\transferencia-vehicular.js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;









const TransferenciaVehicular = props => {
  const {
    register,
    errors,
    handleSubmit
  } = Object(react_hook_form__WEBPACK_IMPORTED_MODULE_2__["useForm"])();
  const {
    0: showForm,
    1: setShowForm
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: formBody,
    1: setFormBody
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(true);
  const {
    0: showDataCasado,
    1: setShowDataCasado
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: showDataCasado2,
    1: setShowDataCasado2
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: fileImg,
    1: setFileImg
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  const {
    0: countFile,
    1: setCountFile
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([]);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    var country = 'Peru',
        countryCode = "+51";
    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).click(function (e) {
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).closest('.container-flag').length <= 0 && !jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('flat-item')) jquery__WEBPACK_IMPORTED_MODULE_3___default()('.list-flag').fadeOut(150);
    });
    /********/

    jquery__WEBPACK_IMPORTED_MODULE_3___default()(document).on('click', function (e) {
      //----------
      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('item-popup')) {
        setShowForm(false);
      }

      if (jquery__WEBPACK_IMPORTED_MODULE_3___default()(e.target).hasClass('int-pscroll')) {
        setShowForm(false);
      }
    });
  }, []);

  const alphanumericValues = str => {
    return str.toString() // Cast to string
    .toLowerCase() // Convert the string to lowercase letters
    .normalize('NFD') // The normalize() method returns the Unicode Normalization Form of a given string.
    .trim() // Remove whitespace from both sides of a string
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-');
  };

  const formReset = () => {
    setFileImg([]);
    setCountFile([]); //document.querySelector("#form-data").reset()

    document.getElementsByTagName("form")[0].reset();
    document.querySelector('#comprobante_img_place').innerHTML = "Adjuntar voucher";
  };

  const fileOnChange = e => {
    if (e.target.files.length > 0) {
      let newNameDate = new Date().getTime();
      let file = e.target.files[0];
      let newName1 = file.name.split('.').shift();
      let newName = alphanumericValues(newName1);
      let blob = file.slice(0, file.size, file.type);
      let newFile = new File([blob], newName + '-' + newNameDate + '.' + file.type.split('/')[1], {
        type: file.type
      });
      document.getElementById('comprobante_img_place').innerHTML = e.target.value.split(/(\\|\/)/g).pop();
      setFileImg(newFile);
      setCountFile([...countFile, newName]);
      document.querySelector('#name_img').value = newName + '-' + newNameDate + '.' + file.type.split('/')[1];
    }
  };

  const onSubmit = data => {
    console.log(data); //return false

    if (countFile.length > 0) {
      var formData = new FormData();
      formData.append("demo", fileImg);
      axios__WEBPACK_IMPORTED_MODULE_7___default.a.post(_config__WEBPACK_IMPORTED_MODULE_5__["default"].URL_BACK + '/upload-only-img', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      }).then(res => {
        console.log('Exito upload');
      }).catch(err => {
        console.error('Error');
      });
    }

    let sendValue = data;
    axios__WEBPACK_IMPORTED_MODULE_7___default()({
      method: 'post',
      url: _config__WEBPACK_IMPORTED_MODULE_5__["default"].API_PATH + '/p-tv',
      data: sendValue
    }).then(function (response) {
      console.log('exito');
      setShowForm(true);
      formReset();
    });
  };

  const triggerClosePopup = () => {
    setShowForm(false);
  };

  return __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, showForm && __jsx(_contacto_popup_thanks__WEBPACK_IMPORTED_MODULE_4__["default"], {
    eClick: triggerClosePopup,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 17
    }
  }, __jsx("h3", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 131,
      columnNumber: 21
    }
  }, "\xA1Gracias!"), __jsx("p", {
    className: "description",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 132,
      columnNumber: 21
    }
  }, "Hemos recibido la solicitud de su tr\xE1mite, Transferencia vehicular. Uno de nuestros asesores legales se comunicar\xE1 usted a la brevedad para continuar con el proceso. Te estaremos contactando pronto. No olvide revisar su cuenta de email (bandeja de entrada y o Spam) en donde le hemos enviado toda la informaci\xF3n que nos ha proporcionado. Si tiene otra consulta puede llamar a nuestra central telef\xF3nica (01) 7151588 que estaremos gustosos en atenderlo.")), __jsx("div", {
    className: "section tramite-form with-bg-img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 13
    }
  }, __jsx("div", {
    className: "row",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 21
    }
  }, __jsx("div", {
    className: "caption caption-static caption-type-1 caption-type-2 " + props.width,
    style: {
      marginTop: 0
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 141,
      columnNumber: 25
    }
  }, __jsx("div", {
    className: "parent-title-2 start-xs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 142,
      columnNumber: 29
    }
  }, __jsx("h2", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 33
    }
  }, __jsx("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 37
    }
  }, "Transferencias vehiculares"))), __jsx("form", {
    onSubmit: handleSubmit(onSubmit),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 29
    }
  }, __jsx("div", {
    className: "block-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 149,
      columnNumber: 33
    }
  }, __jsx("input", {
    type: "hidden",
    id: "name_img",
    name: "name_img",
    ref: register({
      required: false
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151,
      columnNumber: 37
    }
  }), __jsx("div", {
    style: {
      marginTop: 20
    },
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 157,
      columnNumber: 37
    }
  }, "Vendedor:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 159,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_tipo_poder",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 160,
      columnNumber: 41
    }
  }, "Tipo de persona:"), __jsx("select", {
    className: "form-item",
    name: "ven_tipo_poder",
    id: "ven_tipo_poder",
    onChange: e => setFormBody(formBody ? false : true),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 161,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 169,
      columnNumber: 45
    }
  }, "Persona Natural"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 170,
      columnNumber: 45
    }
  }, "Persona Juridica")), errors.ven_tipo_poder && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 172,
      columnNumber: 67
    }
  }, errors.ven_tipo_poder.message)), !formBody && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_ruc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 178,
      columnNumber: 49
    }
  }, "RUC:"), __jsx("input", {
    type: "text",
    id: "ven_ruc",
    name: "ven_ruc",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 179,
      columnNumber: 49
    }
  }), errors.ven_ruc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184,
      columnNumber: 68
    }
  }, errors.ven_ruc.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 187,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_partida",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188,
      columnNumber: 49
    }
  }, "Partida registral:"), __jsx("input", {
    type: "text",
    id: "ven_partida",
    name: "ven_partida",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189,
      columnNumber: 49
    }
  }), errors.ven_partida && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194,
      columnNumber: 72
    }
  }, errors.ven_partida.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_lugar",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 198,
      columnNumber: 49
    }
  }, "Lugar de inscripci\xF3n:"), __jsx("input", {
    type: "text",
    id: "ven_lugar",
    name: "ven_lugar",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 199,
      columnNumber: 49
    }
  }), errors.ven_lugar && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205,
      columnNumber: 70
    }
  }, errors.ven_lugar.message))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 211,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 212,
      columnNumber: 41
    }
  }, "Nombre completo:"), __jsx("input", {
    type: "text",
    id: "ven_nombre",
    name: "ven_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 213,
      columnNumber: 41
    }
  }), errors.ven_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 219,
      columnNumber: 63
    }
  }, errors.ven_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 224,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 226,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 227,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "ven_tipo_doc",
    onChange: e => document.getElementById('ven_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 228,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 235,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 236,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.ven_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239,
      columnNumber: 73
    }
  }, errors.ven_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 242,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "ven_num_doc",
    name: "ven_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244,
      columnNumber: 49
    }
  }), errors.ven_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246,
      columnNumber: 72
    }
  }, errors.ven_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_ocupacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 254,
      columnNumber: 41
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "ven_ocupacion",
    name: "ven_ocupacion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 255,
      columnNumber: 41
    }
  }), errors.ven_ocupacion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 261,
      columnNumber: 66
    }
  }, errors.ven_ocupacion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 264,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 265,
      columnNumber: 41
    }
  }, "Domicilio:"), __jsx("input", {
    type: "text",
    id: "ven_domicilio",
    name: "ven_domicilio",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 266,
      columnNumber: 41
    }
  }), errors.ven_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 271,
      columnNumber: 66
    }
  }, errors.ven_domicilio.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 274,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "ven_estado_civil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 275,
      columnNumber: 41
    }
  }, "Estado civil:"), __jsx("select", {
    className: "form-item",
    id: "ven_estado_civil",
    name: "ven_estado_civil",
    onChange: e => e.target.value == 2 ? setShowDataCasado(true) : setShowDataCasado(false),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 276,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 284,
      columnNumber: 45
    }
  }, "Seleccione un estado"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 285,
      columnNumber: 45
    }
  }, "Soltero"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 286,
      columnNumber: 45
    }
  }, "Casado"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 287,
      columnNumber: 45
    }
  }, "Divorciado"), __jsx("option", {
    value: "4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 288,
      columnNumber: 45
    }
  }, "Viudo")), errors.ven_estado_civil && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 290,
      columnNumber: 69
    }
  }, errors.ven_estado_civil.message)), showDataCasado && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 295,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_nombre_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 296,
      columnNumber: 49
    }
  }, "Nombre del conyuge:"), __jsx("input", {
    type: "text",
    id: "ven_nombre_conyuge",
    name: "ven_nombre_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 297,
      columnNumber: 49
    }
  }), errors.ven_nombre_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 303,
      columnNumber: 79
    }
  }, errors.ven_nombre_conyuge.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 306,
      columnNumber: 45
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 308,
      columnNumber: 49
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 310,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "ven_tipo_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 311,
      columnNumber: 57
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "ven_tipo_doc_conyuge",
    onChange: e => document.getElementById('ven_num_doc_conyuge').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 312,
      columnNumber: 57
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 319,
      columnNumber: 61
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 320,
      columnNumber: 61
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 321,
      columnNumber: 61
    }
  }, "Pasaporte")), errors.ven_tipo_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 323,
      columnNumber: 89
    }
  }, errors.ven_tipo_doc_conyuge.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 326,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "ven_num_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 327,
      columnNumber: 57
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "ven_num_doc_conyuge",
    name: "ven_num_doc_conyuge",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 328,
      columnNumber: 57
    }
  }), errors.ven_num_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 330,
      columnNumber: 88
    }
  }, errors.ven_num_doc_conyuge.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "ven_ocupacion_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 338,
      columnNumber: 49
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "ven_ocupacion_conyuge",
    name: "ven_ocupacion_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339,
      columnNumber: 49
    }
  }), errors.ven_ocupacion_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 345,
      columnNumber: 82
    }
  }, errors.ven_ocupacion_conyuge.message))), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 355,
      columnNumber: 37
    }
  }, "Comprador:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 357,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_tipo_poder",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 358,
      columnNumber: 41
    }
  }, "Tipo de persona:"), __jsx("select", {
    className: "form-item",
    name: "com_tipo_poder",
    id: "com_tipo_poder",
    onChange: e => setFormBody(formBody ? false : true),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 359,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 367,
      columnNumber: 45
    }
  }, "Persona Natural"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 368,
      columnNumber: 45
    }
  }, "Persona Juridica")), errors.com_tipo_poder && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 370,
      columnNumber: 67
    }
  }, errors.com_tipo_poder.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 373,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_ruc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 374,
      columnNumber: 41
    }
  }, "RUC:"), __jsx("input", {
    type: "text",
    id: "com_ruc",
    name: "com_ruc",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 375,
      columnNumber: 41
    }
  }), errors.com_ruc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 380,
      columnNumber: 60
    }
  }, errors.com_ruc.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 383,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_partida",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 384,
      columnNumber: 41
    }
  }, "Partida registral:"), __jsx("input", {
    type: "text",
    id: "com_partida",
    name: "com_partida",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 385,
      columnNumber: 41
    }
  }), errors.com_partida && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 390,
      columnNumber: 64
    }
  }, errors.com_partida.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 393,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_lugar",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 394,
      columnNumber: 41
    }
  }, "Lugar de inscripci\xF3n:"), __jsx("input", {
    type: "text",
    id: "com_lugar",
    name: "com_lugar",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 395,
      columnNumber: 41
    }
  }), errors.com_lugar && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401,
      columnNumber: 62
    }
  }, errors.com_lugar.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 404,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 405,
      columnNumber: 41
    }
  }, "Nombre completo:"), __jsx("input", {
    type: "text",
    id: "com_nombre",
    name: "com_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 406,
      columnNumber: 41
    }
  }), errors.com_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 412,
      columnNumber: 63
    }
  }, errors.com_nombre.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 415,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 417,
      columnNumber: 41
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 419,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_tipo_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 420,
      columnNumber: 49
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "com_tipo_doc",
    onChange: e => document.getElementById('com_num_doc').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 421,
      columnNumber: 49
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 428,
      columnNumber: 53
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 429,
      columnNumber: 53
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 430,
      columnNumber: 53
    }
  }, "Pasaporte")), errors.com_tipo_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 432,
      columnNumber: 73
    }
  }, errors.com_tipo_doc.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 435,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_num_doc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 436,
      columnNumber: 49
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "com_num_doc",
    name: "com_num_doc",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 437,
      columnNumber: 49
    }
  }), errors.com_num_doc && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 439,
      columnNumber: 72
    }
  }, errors.com_num_doc.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 446,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_ocupacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 447,
      columnNumber: 41
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "com_ocupacion",
    name: "com_ocupacion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 448,
      columnNumber: 41
    }
  }), errors.com_ocupacion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 454,
      columnNumber: 66
    }
  }, errors.com_ocupacion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 457,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_domicilio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 458,
      columnNumber: 41
    }
  }, "Domicilio:"), __jsx("input", {
    type: "text",
    id: "com_domicilio",
    name: "com_domicilio",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 459,
      columnNumber: 41
    }
  }), errors.com_domicilio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 464,
      columnNumber: 66
    }
  }, errors.com_domicilio.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 467,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "com_estado_civil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 468,
      columnNumber: 41
    }
  }, "Estado civil:"), __jsx("select", {
    className: "form-item",
    id: "com_estado_civil",
    name: "com_estado_civil",
    onChange: e => e.target.value == 2 ? setShowDataCasado2(true) : setShowDataCasado2(false),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 469,
      columnNumber: 41
    }
  }, __jsx("option", {
    hidden: true,
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 477,
      columnNumber: 45
    }
  }, "Seleccione un estado"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 478,
      columnNumber: 45
    }
  }, "Soltero"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 479,
      columnNumber: 45
    }
  }, "Casado"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 480,
      columnNumber: 45
    }
  }, "Divorciado"), __jsx("option", {
    value: "4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 481,
      columnNumber: 45
    }
  }, "Viudo")), errors.com_estado_civil && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 483,
      columnNumber: 69
    }
  }, errors.com_estado_civil.message)), showDataCasado2 && __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 488,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_nombre_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 489,
      columnNumber: 49
    }
  }, "Nombre del conyuge:"), __jsx("input", {
    type: "text",
    id: "com_nombre_conyuge",
    name: "com_nombre_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 490,
      columnNumber: 49
    }
  }), errors.com_nombre_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 496,
      columnNumber: 79
    }
  }, errors.com_nombre_conyuge.message)), __jsx("div", {
    className: "group-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 499,
      columnNumber: 45
    }
  }, __jsx("div", {
    className: "g-form-col g-form-col-2 g-form-col-2-type-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 501,
      columnNumber: 49
    }
  }, __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 503,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "com_tipo_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 504,
      columnNumber: 57
    }
  }, "Tipo de documento:"), __jsx("select", {
    className: "form-item",
    name: "com_tipo_doc_conyuge",
    onChange: e => document.getElementById('com_num_doc_conyuge').focus(),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 505,
      columnNumber: 57
    }
  }, __jsx("option", {
    defaultValue: true,
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 512,
      columnNumber: 61
    }
  }, "DNI"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 513,
      columnNumber: 61
    }
  }, "Carnet de extranjeria"), __jsx("option", {
    value: "3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 514,
      columnNumber: 61
    }
  }, "Pasaporte")), errors.com_tipo_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 516,
      columnNumber: 89
    }
  }, errors.com_tipo_doc_conyuge.message)), __jsx("p", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 519,
      columnNumber: 53
    }
  }, __jsx("label", {
    htmlFor: "com_num_doc_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 520,
      columnNumber: 57
    }
  }, "N\xFAmero de Documento"), __jsx("input", {
    type: "text",
    id: "com_num_doc_conyuge",
    name: "com_num_doc_conyuge",
    className: "form-item",
    ref: register({
      required: "Apellidos es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 521,
      columnNumber: 57
    }
  }), errors.com_num_doc_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 523,
      columnNumber: 88
    }
  }, errors.com_num_doc_conyuge.message)))), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 530,
      columnNumber: 45
    }
  }, __jsx("label", {
    htmlFor: "com_ocupacion_conyuge",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 531,
      columnNumber: 49
    }
  }, "Ocupaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "com_ocupacion_conyuge",
    name: "com_ocupacion_conyuge",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 532,
      columnNumber: 49
    }
  }), errors.com_ocupacion_conyuge && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 538,
      columnNumber: 82
    }
  }, errors.com_ocupacion_conyuge.message))), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 550,
      columnNumber: 37
    }
  }, "Del vehiculo:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 552,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_placa",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 553,
      columnNumber: 41
    }
  }, "Placa:"), __jsx("input", {
    type: "text",
    id: "dv_placa",
    name: "dv_placa",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 554,
      columnNumber: 41
    }
  }), errors.dv_placa && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 559,
      columnNumber: 61
    }
  }, errors.dv_placa.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 562,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_modelo",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 563,
      columnNumber: 41
    }
  }, "Modelo:"), __jsx("input", {
    type: "text",
    id: "dv_modelo",
    name: "dv_modelo",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 564,
      columnNumber: 41
    }
  }), errors.dv_modelo && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 569,
      columnNumber: 62
    }
  }, errors.dv_modelo.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 572,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_color",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 573,
      columnNumber: 41
    }
  }, "Color:"), __jsx("input", {
    type: "text",
    id: "dv_color",
    name: "dv_color",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 574,
      columnNumber: 41
    }
  }), errors.dv_color && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 579,
      columnNumber: 61
    }
  }, errors.dv_color.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 582,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_clase",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 583,
      columnNumber: 41
    }
  }, "Clase:"), __jsx("input", {
    type: "text",
    id: "dv_clase",
    name: "dv_clase",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 584,
      columnNumber: 41
    }
  }), errors.dv_clase && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 589,
      columnNumber: 61
    }
  }, errors.dv_clase.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 592,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_combustible",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 593,
      columnNumber: 41
    }
  }, "Combustible:"), __jsx("input", {
    type: "text",
    id: "dv_combustible",
    name: "dv_combustible",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 594,
      columnNumber: 41
    }
  }), errors.dv_combustible && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 599,
      columnNumber: 67
    }
  }, errors.dv_combustible.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 602,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_numero_motor",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 603,
      columnNumber: 41
    }
  }, "N\xFAmero de motor:"), __jsx("input", {
    type: "text",
    id: "dv_numero_motor",
    name: "dv_numero_motor",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 604,
      columnNumber: 41
    }
  }), errors.dv_numero_motor && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 609,
      columnNumber: 68
    }
  }, errors.dv_numero_motor.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 612,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_marca",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 613,
      columnNumber: 41
    }
  }, "Marca:"), __jsx("input", {
    type: "text",
    id: "dv_marca",
    name: "dv_marca",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 614,
      columnNumber: 41
    }
  }), errors.dv_marca && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 619,
      columnNumber: 61
    }
  }, errors.dv_marca.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 622,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_carroceria",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 623,
      columnNumber: 41
    }
  }, "Carrocer\xEDa:"), __jsx("input", {
    type: "text",
    id: "dv_carroceria",
    name: "dv_carroceria",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 624,
      columnNumber: 41
    }
  }), errors.dv_carroceria && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 629,
      columnNumber: 66
    }
  }, errors.dv_carroceria.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 632,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_ano_fabricacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 633,
      columnNumber: 41
    }
  }, "A\xF1o de Fabricaci\xF3n:"), __jsx("input", {
    type: "text",
    id: "dv_ano_fabricacion",
    name: "dv_ano_fabricacion",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 634,
      columnNumber: 41
    }
  }), errors.dv_ano_fabricacion && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 640,
      columnNumber: 71
    }
  }, errors.dv_ano_fabricacion.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 643,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dv_num_serie",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 644,
      columnNumber: 41
    }
  }, "N\xFAmero de serie:"), __jsx("input", {
    type: "text",
    id: "dv_num_serie",
    name: "dv_num_serie",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 645,
      columnNumber: 41
    }
  }), errors.dv_num_serie && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 650,
      columnNumber: 65
    }
  }, errors.dv_num_serie.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 658,
      columnNumber: 37
    }
  }, "Condiciones:"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 660,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_precio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 661,
      columnNumber: 41
    }
  }, "Precio:"), __jsx("input", {
    type: "text",
    id: "con_precio",
    name: "con_precio",
    className: "form-item",
    placeholder: "Seleccionar la cantidad",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 662,
      columnNumber: 41
    }
  }), errors.con_precio && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 668,
      columnNumber: 63
    }
  }, errors.con_precio.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 671,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_moneda",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 672,
      columnNumber: 41
    }
  }, "Moneda:"), __jsx("select", {
    className: "form-item",
    name: "con_moneda",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 673,
      columnNumber: 41
    }
  }, __jsx("option", {
    value: "",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 679,
      columnNumber: 45
    }
  }, "Elige soles o d\xF3lares"), __jsx("option", {
    value: "1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 680,
      columnNumber: 45
    }
  }, "Soles"), __jsx("option", {
    value: "2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 681,
      columnNumber: 45
    }
  }, "D\xF3lares")), errors.con_moneda && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 683,
      columnNumber: 63
    }
  }, errors.con_moneda.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 686,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_forma_pago",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 687,
      columnNumber: 41
    }
  }, "Forma de pago:"), __jsx("input", {
    type: "text",
    id: "con_forma_pago",
    name: "con_forma_pago",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 688,
      columnNumber: 41
    }
  }), errors.con_forma_pago && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 693,
      columnNumber: 67
    }
  }, errors.con_forma_pago.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 696,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_fecha_entrega",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 697,
      columnNumber: 41
    }
  }, "Fecha de entrega:"), __jsx("input", {
    type: "text",
    id: "con_fecha_entrega",
    name: "con_fecha_entrega",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 698,
      columnNumber: 41
    }
  }), errors.con_fecha_entrega && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 703,
      columnNumber: 70
    }
  }, errors.con_fecha_entrega.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 706,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "con_otros_detalles",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 707,
      columnNumber: 41
    }
  }, "Otros detalles:"), __jsx("input", {
    type: "text",
    id: "con_otros_detalles",
    name: "con_otros_detalles",
    className: "form-item",
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 708,
      columnNumber: 41
    }
  }), errors.con_otros_detalles && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 713,
      columnNumber: 71
    }
  }, errors.con_otros_detalles.message)), __jsx("div", {
    className: "form-text-line",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 722,
      columnNumber: 37
    }
  }, "Datos de contacto"), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 724,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_nombre",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 725,
      columnNumber: 41
    }
  }, "Nombres completos:"), __jsx("input", {
    type: "text",
    id: "dc_nombre",
    name: "dc_nombre",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^ a-záéíóúüñ]+/ig, ""),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 726,
      columnNumber: 41
    }
  }), errors.dc_nombre && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 732,
      columnNumber: 62
    }
  }, errors.dc_nombre.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 735,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_telefono",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 736,
      columnNumber: 41
    }
  }, "Tel\xE9fonos:"), __jsx("input", {
    type: "text",
    id: "dc_telefono",
    name: "dc_telefono",
    className: "form-item",
    onInput: e => e.target.value = e.target.value.replace(/[^0-9]+/ig, ''),
    ref: register({
      required: "Este campo es obligatorio"
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 737,
      columnNumber: 41
    }
  }), errors.dc_telefono && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 743,
      columnNumber: 64
    }
  }, errors.dc_telefono.message)), __jsx("div", {
    className: "box-form",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 746,
      columnNumber: 37
    }
  }, __jsx("label", {
    htmlFor: "dc_email",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 747,
      columnNumber: 41
    }
  }, "Email:"), __jsx("input", {
    type: "text",
    id: "dc_email",
    name: "dc_email",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    ref: register({
      required: "Este campo es obligatorio",
      pattern: {
        value: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        message: "Ingresar un Email valido"
      }
    }),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 748,
      columnNumber: 41
    }
  }), errors.dc_email && __jsx("span", {
    className: "fi-validator",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 758,
      columnNumber: 61
    }
  }, errors.dc_email.message)), __jsx(_components_form_payment__WEBPACK_IMPORTED_MODULE_6__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 761,
      columnNumber: 37
    }
  }), __jsx("div", {
    className: "box-form box-file-img box-form-mg-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 763,
      columnNumber: 37
    }
  }, __jsx("div", {
    className: "title",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 764,
      columnNumber: 41
    }
  }, "Comprobante de pago (opcional):"), __jsx("label", {
    className: "form-item",
    id: "comprobante_img_place",
    htmlFor: "comprobante_img",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 765,
      columnNumber: 41
    }
  }, "Adjuntar voucher"), __jsx("input", {
    type: "file",
    id: "comprobante_img",
    name: "comprobante_img",
    className: "form-item",
    placeholder: "Detalle con qui\xE9n viaja y otros",
    accept: ".jpg, .jpeg, .png",
    onChange: e => fileOnChange(e),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 766,
      columnNumber: 41
    }
  })), __jsx("button", {
    type: "submit",
    className: "button",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 773,
      columnNumber: 37
    }
  }, "Enviar tr\xE1mite")))))));
};

/* harmony default export */ __webpack_exports__["default"] = (TransferenciaVehicular);

/***/ }),

/***/ "./config.js":
/*!*******************!*\
  !*** ./config.js ***!
  \*******************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var dataConfig = {};
const envm = "development";

if (envm === "development") {
  dataConfig = {
    "URL": "http://localhost:3000",
    "URL_BACK": "http://localhost:4000",
    "PORT": 4000,
    "NODE_ENV": "development",
    "DB_HOST": "localhost",
    "DB_USER": "root",
    "DB_PASSWORD": "",
    "DB_NAME": "",
    "FB_APP_ID": "",
    "FB_VERSION": 'v5.0',
    "FB_APP_SECRET": "",
    "GOOGLE_CLIENT_ID": "",
    "GOOGLE_CLIENT_SECRET": "",
    "SECURE": false,
    "API_PATH": "http://localhost:4000/getapi"
  };
} else {
  dataConfig = {
    "URL": "http://notariaroman.pe",
    "URL_BACK": "http://admin.notariaroman.pe",
    "PORT": 3000,
    "NODE_ENV": "production",
    "DB_HOST": "localhost",
    "DB_USER": "",
    "DB_PASSWORD": "",
    "DB_NAME": "data_frbl",
    "FB_APP_ID": "",
    "FB_VERSION": 'v5.0',
    "FB_APP_SECRET": "",
    "GOOGLE_CLIENT_ID": "",
    "GOOGLE_CLIENT_SECRET": "",
    "SECURE": true,
    "API_PATH": "http://admin.notariaroman.pe/getapi"
  };
}

/* harmony default export */ __webpack_exports__["default"] = (dataConfig);

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _url = __webpack_require__(/*! url */ "url");

var _utils = __webpack_require__(/*! ../next-server/lib/utils */ "../next-server/lib/utils");

var _router = _interopRequireDefault(__webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js"));

var _router2 = __webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js");

function isLocal(href) {
  const url = (0, _url.parse)(href, false, true);
  const origin = (0, _url.parse)((0, _utils.getLocationOrigin)(), false, true);
  return !url.host || url.protocol === origin.protocol && url.host === origin.host;
}

function memoizedFormatUrl(formatFunc) {
  let lastHref = null;
  let lastAs = null;
  let lastResult = null;
  return (href, as) => {
    if (lastResult && href === lastHref && as === lastAs) {
      return lastResult;
    }

    const result = formatFunc(href, as);
    lastHref = href;
    lastAs = as;
    lastResult = result;
    return result;
  };
}

function formatUrl(url) {
  return url && typeof url === 'object' ? (0, _utils.formatWithValidation)(url) : url;
}

let observer;
const listeners = new Map();
const IntersectionObserver = false ? undefined : null;
const prefetched = {};

function getObserver() {
  // Return shared instance of IntersectionObserver if already created
  if (observer) {
    return observer;
  } // Only create shared IntersectionObserver if supported in browser


  if (!IntersectionObserver) {
    return undefined;
  }

  return observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (!listeners.has(entry.target)) {
        return;
      }

      const cb = listeners.get(entry.target);

      if (entry.isIntersecting || entry.intersectionRatio > 0) {
        observer.unobserve(entry.target);
        listeners.delete(entry.target);
        cb();
      }
    });
  }, {
    rootMargin: '200px'
  });
}

const listenToIntersections = (el, cb) => {
  const observer = getObserver();

  if (!observer) {
    return () => {};
  }

  observer.observe(el);
  listeners.set(el, cb);
  return () => {
    try {
      observer.unobserve(el);
    } catch (err) {
      console.error(err);
    }

    listeners.delete(el);
  };
};

class Link extends _react.Component {
  constructor(props) {
    super(props);
    this.p = void 0;

    this.cleanUpListeners = () => {};

    this.formatUrls = memoizedFormatUrl((href, asHref) => {
      return {
        href: (0, _router2.addBasePath)(formatUrl(href)),
        as: asHref ? (0, _router2.addBasePath)(formatUrl(asHref)) : asHref
      };
    });

    this.linkClicked = e => {
      const {
        nodeName,
        target
      } = e.currentTarget;

      if (nodeName === 'A' && (target && target !== '_self' || e.metaKey || e.ctrlKey || e.shiftKey || e.nativeEvent && e.nativeEvent.which === 2)) {
        // ignore click for new tab / new window behavior
        return;
      }

      let {
        href,
        as
      } = this.formatUrls(this.props.href, this.props.as);

      if (!isLocal(href)) {
        // ignore click if it's outside our scope (e.g. https://google.com)
        return;
      }

      const {
        pathname
      } = window.location;
      href = (0, _url.resolve)(pathname, href);
      as = as ? (0, _url.resolve)(pathname, as) : href;
      e.preventDefault(); //  avoid scroll for urls with anchor refs

      let {
        scroll
      } = this.props;

      if (scroll == null) {
        scroll = as.indexOf('#') < 0;
      } // replace state instead of push if prop is present


      _router.default[this.props.replace ? 'replace' : 'push'](href, as, {
        shallow: this.props.shallow
      }).then(success => {
        if (!success) return;

        if (scroll) {
          window.scrollTo(0, 0);
          document.body.focus();
        }
      });
    };

    if (true) {
      if (props.prefetch) {
        console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/vercel/next.js/prefetch-true-deprecated');
      }
    }

    this.p = props.prefetch !== false;
  }

  componentWillUnmount() {
    this.cleanUpListeners();
  }

  getPaths() {
    const {
      pathname
    } = window.location;
    const {
      href: parsedHref,
      as: parsedAs
    } = this.formatUrls(this.props.href, this.props.as);
    const resolvedHref = (0, _url.resolve)(pathname, parsedHref);
    return [resolvedHref, parsedAs ? (0, _url.resolve)(pathname, parsedAs) : resolvedHref];
  }

  handleRef(ref) {
    if (this.p && IntersectionObserver && ref && ref.tagName) {
      this.cleanUpListeners();
      const isPrefetched = prefetched[this.getPaths().join( // Join on an invalid URI character
      '%')];

      if (!isPrefetched) {
        this.cleanUpListeners = listenToIntersections(ref, () => {
          this.prefetch();
        });
      }
    }
  } // The function is memoized so that no extra lifecycles are needed
  // as per https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html


  prefetch(options) {
    if (!this.p || true) return; // Prefetch the JSON page if asked (only in the client)

    const paths = this.getPaths(); // We need to handle a prefetch error here since we may be
    // loading with priority which can reject but we don't
    // want to force navigation since this is only a prefetch

    _router.default.prefetch(paths[
    /* href */
    0], paths[
    /* asPath */
    1], options).catch(err => {
      if (true) {
        // rethrow to show invalid URL errors
        throw err;
      }
    });

    prefetched[paths.join( // Join on an invalid URI character
    '%')] = true;
  }

  render() {
    let {
      children
    } = this.props;
    const {
      href,
      as
    } = this.formatUrls(this.props.href, this.props.as); // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag

    if (typeof children === 'string') {
      children = /*#__PURE__*/_react.default.createElement("a", null, children);
    } // This will return the first child, if multiple are provided it will throw an error


    const child = _react.Children.only(children);

    const props = {
      ref: el => {
        this.handleRef(el);

        if (child && typeof child === 'object' && child.ref) {
          if (typeof child.ref === 'function') child.ref(el);else if (typeof child.ref === 'object') {
            child.ref.current = el;
          }
        }
      },
      onMouseEnter: e => {
        if (child.props && typeof child.props.onMouseEnter === 'function') {
          child.props.onMouseEnter(e);
        }

        this.prefetch({
          priority: true
        });
      },
      onClick: e => {
        if (child.props && typeof child.props.onClick === 'function') {
          child.props.onClick(e);
        }

        if (!e.defaultPrevented) {
          this.linkClicked(e);
        }
      }
    }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
    // defined, we specify the current 'href', so that repetition is not needed by the user

    if (this.props.passHref || child.type === 'a' && !('href' in child.props)) {
      props.href = as || href;
    } // Add the ending slash to the paths. So, we can serve the
    // "<page>/index.html" directly.


    if (false) {}

    return _react.default.cloneElement(child, props);
  }

}

if (true) {
  const warn = (0, _utils.execOnce)(console.error); // This module gets removed by webpack.IgnorePlugin

  const PropTypes = __webpack_require__(/*! prop-types */ "prop-types");

  const exact = __webpack_require__(/*! prop-types-exact */ "prop-types-exact"); // @ts-ignore the property is supported, when declaring it on the class it outputs an extra bit of code which is not needed.


  Link.propTypes = exact({
    href: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
    as: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
    prefetch: PropTypes.bool,
    replace: PropTypes.bool,
    shallow: PropTypes.bool,
    passHref: PropTypes.bool,
    scroll: PropTypes.bool,
    children: PropTypes.oneOfType([PropTypes.element, (props, propName) => {
      const value = props[propName];

      if (typeof value === 'string') {
        warn(`Warning: You're using a string directly inside <Link>. This usage has been deprecated. Please add an <a> tag as child of <Link>`);
      }

      return null;
    }]).isRequired
  });
}

var _default = Link;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.useRouter = useRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.createRouter = exports.withRouter = exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js"));

exports.Router = _router2.default;
exports.NextRouter = _router2.NextRouter;

var _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ "../next-server/lib/router-context");

var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));

exports.withRouter = _withRouter.default;
/* global window */

const singletonRouter = {
  router: null,
  // holds the actual router instance
  readyCallbacks: [],

  ready(cb) {
    if (this.router) return cb();

    if (false) {}
  }

}; // Create public properties and methods of the router in the singletonRouter

const urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath'];
const routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
const coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it

Object.defineProperty(singletonRouter, 'events', {
  get() {
    return _router2.default.events;
  }

});
urlPropertyFields.forEach(field => {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get() {
      const router = getRouter();
      return router[field];
    }

  });
});
coreMethodFields.forEach(field => {
  // We don't really know the types here, so we add them later instead
  ;

  singletonRouter[field] = (...args) => {
    const router = getRouter();
    return router[field](...args);
  };
});
routerEvents.forEach(event => {
  singletonRouter.ready(() => {
    _router2.default.events.on(event, (...args) => {
      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;
      const _singletonRouter = singletonRouter;

      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField](...args);
        } catch (err) {
          // tslint:disable-next-line:no-console
          console.error(`Error when running the Router event: ${eventField}`); // tslint:disable-next-line:no-console

          console.error(`${err.message}\n${err.stack}`);
        }
      }
    });
  });
});

function getRouter() {
  if (!singletonRouter.router) {
    const message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }

  return singletonRouter.router;
} // Export the singletonRouter and this is the public API.


var _default = singletonRouter; // Reexport the withRoute HOC

exports.default = _default;

function useRouter() {
  return _react.default.useContext(_routerContext.RouterContext);
} // INTERNAL APIS
// -------------
// (do not use following exports inside the app)
// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.


const createRouter = (...args) => {
  singletonRouter.router = new _router2.default(...args);
  singletonRouter.readyCallbacks.forEach(cb => cb());
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}; // This function is used to create the `withRouter` router instance


exports.createRouter = createRouter;

function makePublicRouterInstance(router) {
  const _router = router;
  const instance = {};

  for (const property of urlPropertyFields) {
    if (typeof _router[property] === 'object') {
      instance[property] = Object.assign({}, _router[property]); // makes sure query is not stateful

      continue;
    }

    instance[property] = _router[property];
  } // Events is a static property on the router, the router doesn't have to be initialized to use it


  instance.events = _router2.default.events;
  coreMethodFields.forEach(field => {
    instance[field] = (...args) => {
      return _router[field](...args);
    };
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.default = withRouter;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

function withRouter(ComposedComponent) {
  function WithRouterWrapper(props) {
    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({
      router: (0, _router.useRouter)()
    }, props));
  }

  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app
  ;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;

  if (true) {
    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = `withRouter(${name})`;
  }

  return WithRouterWrapper;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = mitt;
/*
MIT License
Copyright (c) Jason Miller (https://jasonformat.com/)
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
// It's been edited for the needs of this script
// See the LICENSE at the top of the file

function mitt() {
  const all = Object.create(null);
  return {
    on(type, handler) {
      ;
      (all[type] || (all[type] = [])).push(handler);
    },

    off(type, handler) {
      if (all[type]) {
        // tslint:disable-next-line:no-bitwise
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },

    emit(type, ...evts) {
      // eslint-disable-next-line array-callback-return
      ;
      (all[type] || []).slice().map(handler => {
        handler(...evts);
      });
    }

  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.addBasePath = addBasePath;
exports.delBasePath = delBasePath;
exports.default = void 0;

var _url2 = __webpack_require__(/*! url */ "url");

var _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/next-server/lib/mitt.js"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js");

var _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js");

var _routeRegex = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/* global __NEXT_DATA__ */
// tslint:disable:no-console


const basePath =  false || '';

function addBasePath(path) {
  return path.indexOf(basePath) !== 0 ? basePath + path : path;
}

function delBasePath(path) {
  return path.indexOf(basePath) === 0 ? path.substr(basePath.length) || '/' : path;
}

function toRoute(path) {
  return path.replace(/\/$/, '') || '/';
}

const prepareRoute = path => toRoute(!path || path === '/' ? '/index' : path);

function fetchNextData(pathname, query, isServerRender, cb) {
  let attempts = isServerRender ? 3 : 1;

  function getResponse() {
    return fetch((0, _utils.formatWithValidation)({
      pathname: addBasePath( // @ts-ignore __NEXT_DATA__
      `/_next/data/${__NEXT_DATA__.buildId}${delBasePath(pathname)}.json`),
      query
    }), {
      // Cookies are required to be present for Next.js' SSG "Preview Mode".
      // Cookies may also be required for `getServerSideProps`.
      //
      // > `fetch` won’t send cookies, unless you set the credentials init
      // > option.
      // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
      //
      // > For maximum browser compatibility when it comes to sending &
      // > receiving cookies, always supply the `credentials: 'same-origin'`
      // > option instead of relying on the default.
      // https://github.com/github/fetch#caveats
      credentials: 'same-origin'
    }).then(res => {
      if (!res.ok) {
        if (--attempts > 0 && res.status >= 500) {
          return getResponse();
        }

        throw new Error(`Failed to load static props`);
      }

      return res.json();
    });
  }

  return getResponse().then(data => {
    return cb ? cb(data) : data;
  }).catch(err => {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      ;
      err.code = 'PAGE_LOAD_ERROR';
    }

    throw err;
  });
}

class Router {
  /**
  * Map of all components loaded in `Router`
  */
  // Static Data Cache
  constructor(_pathname, _query, _as2, {
    initialProps,
    pageLoader,
    App,
    wrapApp,
    Component,
    err,
    subscription,
    isFallback
  }) {
    this.route = void 0;
    this.pathname = void 0;
    this.query = void 0;
    this.asPath = void 0;
    this.basePath = void 0;
    this.components = void 0;
    this.sdc = {};
    this.sub = void 0;
    this.clc = void 0;
    this.pageLoader = void 0;
    this._bps = void 0;
    this.events = void 0;
    this._wrapApp = void 0;
    this.isSsr = void 0;
    this.isFallback = void 0;

    this.onPopState = e => {
      if (!e.state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        const {
          pathname,
          query
        } = this;
        this.changeState('replaceState', (0, _utils.formatWithValidation)({
          pathname,
          query
        }), (0, _utils.getURL)());
        return;
      } // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site


      if (e.state && this.isSsr && e.state.as === this.asPath && (0, _url2.parse)(e.state.url).pathname === this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.


      if (this._bps && !this._bps(e.state)) {
        return;
      }

      const {
        url,
        as,
        options
      } = e.state;

      if (true) {
        if (typeof url === 'undefined' || typeof as === 'undefined') {
          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/vercel/next.js/popstate-state-empty');
        }
      }

      this.replace(url, as, options);
    };

    this._getStaticData = asPath => {
      const pathname = prepareRoute((0, _url2.parse)(asPath).pathname);
      return  false ? undefined : fetchNextData(pathname, null, this.isSsr, data => this.sdc[pathname] = data);
    };

    this._getServerData = asPath => {
      let {
        pathname,
        query
      } = (0, _url2.parse)(asPath, true);
      pathname = prepareRoute(pathname);
      return fetchNextData(pathname, query, this.isSsr);
    }; // represents the current component key


    this.route = toRoute(_pathname); // set up the component cache (by route keys)

    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.

    if (_pathname !== '/_error') {
      this.components[this.route] = {
        Component,
        props: initialProps,
        err,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }

    this.components['/_app'] = {
      Component: App
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented

    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = _pathname;
    this.query = _query; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch

    this.asPath = // @ts-ignore this is temporarily global (attached to window)
    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as2;
    this.basePath = basePath;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site

    this.isSsr = true;
    this.isFallback = isFallback;

    if (false) {}
  } // @deprecated backwards compatibility even though it's a private method.


  static _rewriteUrlForNextExport(url) {
    if (false) {} else {
      return url;
    }
  }

  update(route, mod) {
    const Component = mod.default || mod;
    const data = this.components[route];

    if (!data) {
      throw new Error(`Cannot update unavailable route: ${route}`);
    }

    const newData = Object.assign({}, data, {
      Component,
      __N_SSG: mod.__N_SSG,
      __N_SSP: mod.__N_SSP
    });
    this.components[route] = newData; // pages/_app.js updated

    if (route === '/_app') {
      this.notify(this.components[this.route]);
      return;
    }

    if (route === this.route) {
      this.notify(newData);
    }
  }

  reload() {
    window.location.reload();
  }
  /**
  * Go back in history
  */


  back() {
    window.history.back();
  }
  /**
  * Performs a `pushState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  push(url, as = url, options = {}) {
    return this.change('pushState', url, as, options);
  }
  /**
  * Performs a `replaceState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  replace(url, as = url, options = {}) {
    return this.change('replaceState', url, as, options);
  }

  change(method, _url, _as, options) {
    return new Promise((resolve, reject) => {
      if (!options._h) {
        this.isSsr = false;
      } // marking route changes as a navigation start entry


      if (_utils.ST) {
        performance.mark('routeChange');
      } // If url and as provided as an object representation,
      // we'll format them into the string version here.


      let url = typeof _url === 'object' ? (0, _utils.formatWithValidation)(_url) : _url;
      let as = typeof _as === 'object' ? (0, _utils.formatWithValidation)(_as) : _as;
      url = addBasePath(url);
      as = addBasePath(as); // Add the ending slash to the paths. So, we can serve the
      // "<page>/index.html" directly for the SSR page.

      if (false) {}

      this.abortComponentLoad(as); // If the url change is only related to a hash change
      // We should not proceed. We should only change the state.
      // WARNING: `_h` is an internal option for handing Next.js client-side
      // hydration. Your app should _never_ use this property. It may change at
      // any time without notice.

      if (!options._h && this.onlyAHashChange(as)) {
        this.asPath = as;
        Router.events.emit('hashChangeStart', as);
        this.changeState(method, url, as, options);
        this.scrollToHash(as);
        Router.events.emit('hashChangeComplete', as);
        return resolve(true);
      }

      const {
        pathname,
        query,
        protocol
      } = (0, _url2.parse)(url, true);

      if (!pathname || protocol) {
        if (true) {
          throw new Error(`Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`);
        }

        return resolve(false);
      } // If asked to change the current URL we should reload the current page
      // (not location.reload() but reload getInitialProps and other Next.js stuffs)
      // We also need to set the method = replaceState always
      // as this should not go into the history (That's how browsers work)
      // We should compare the new asPath to the current asPath, not the url


      if (!this.urlIsNew(as)) {
        method = 'replaceState';
      }

      const route = toRoute(pathname);
      const {
        shallow = false
      } = options;

      if ((0, _isDynamic.isDynamicRoute)(route)) {
        const {
          pathname: asPathname
        } = (0, _url2.parse)(as);
        const routeRegex = (0, _routeRegex.getRouteRegex)(route);
        const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);

        if (!routeMatch) {
          const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);

          if (missingParams.length > 0) {
            if (true) {
              console.warn(`Mismatching \`as\` and \`href\` failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \`href\`'s \`query\``);
            }

            return reject(new Error(`The provided \`as\` value (${asPathname}) is incompatible with the \`href\` value (${route}). ` + `Read more: https://err.sh/vercel/next.js/incompatible-href-as`));
          }
        } else {
          // Merge params into `query`, overwriting any specified in search
          Object.assign(query, routeMatch);
        }
      }

      Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result

      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {
        const {
          error
        } = routeInfo;

        if (error && error.cancelled) {
          return resolve(false);
        }

        Router.events.emit('beforeHistoryChange', as);
        this.changeState(method, url, as, options);

        if (true) {
          const appComp = this.components['/_app'].Component;
          window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
        }

        this.set(route, pathname, query, as, routeInfo).then(() => {
          if (error) {
            Router.events.emit('routeChangeError', error, as);
            throw error;
          }

          Router.events.emit('routeChangeComplete', as);
          return resolve(true);
        });
      }, reject);
    });
  }

  changeState(method, url, as, options = {}) {
    if (true) {
      if (typeof window.history === 'undefined') {
        console.error(`Warning: window.history is not available.`);
        return;
      }

      if (typeof window.history[method] === 'undefined') {
        console.error(`Warning: window.history.${method} is not available`);
        return;
      }
    }

    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {
      window.history[method]({
        url,
        as,
        options
      }, // Most browsers currently ignores this parameter, although they may use it in the future.
      // Passing the empty string here should be safe against future changes to the method.
      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
      '', as);
    }
  }

  getRouteInfo(route, pathname, query, as, shallow = false) {
    const cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible
    // If the route is already rendered on the screen.

    if (shallow && cachedRouteInfo && this.route === route) {
      return Promise.resolve(cachedRouteInfo);
    }

    const handleError = (err, loadErrorFail) => {
      return new Promise(resolve => {
        if (err.code === 'PAGE_LOAD_ERROR' || loadErrorFail) {
          // If we can't load the page it could be one of following reasons
          //  1. Page doesn't exists
          //  2. Page does exist in a different zone
          //  3. Internal error while loading the page
          // So, doing a hard reload is the proper way to deal with this.
          window.location.href = as; // Changing the URL doesn't block executing the current code path.
          // So, we need to mark it as a cancelled error and stop the routing logic.

          err.cancelled = true; // @ts-ignore TODO: fix the control flow here

          return resolve({
            error: err
          });
        }

        if (err.cancelled) {
          // @ts-ignore TODO: fix the control flow here
          return resolve({
            error: err
          });
        }

        resolve(this.fetchComponent('/_error').then(res => {
          const {
            page: Component
          } = res;
          const routeInfo = {
            Component,
            err
          };
          return new Promise(resolve => {
            this.getInitialProps(Component, {
              err,
              pathname,
              query
            }).then(props => {
              routeInfo.props = props;
              routeInfo.error = err;
              resolve(routeInfo);
            }, gipErr => {
              console.error('Error in error page `getInitialProps`: ', gipErr);
              routeInfo.error = err;
              routeInfo.props = {};
              resolve(routeInfo);
            });
          });
        }).catch(err => handleError(err, true)));
      });
    };

    return new Promise((resolve, reject) => {
      if (cachedRouteInfo) {
        return resolve(cachedRouteInfo);
      }

      this.fetchComponent(route).then(res => resolve({
        Component: res.page,
        __N_SSG: res.mod.__N_SSG,
        __N_SSP: res.mod.__N_SSP
      }), reject);
    }).then(routeInfo => {
      const {
        Component,
        __N_SSG,
        __N_SSP
      } = routeInfo;

      if (true) {
        const {
          isValidElementType
        } = __webpack_require__(/*! react-is */ "react-is");

        if (!isValidElementType(Component)) {
          throw new Error(`The default export is not a React Component in page: "${pathname}"`);
        }
      }

      return this._getData(() => __N_SSG ? this._getStaticData(as) : __N_SSP ? this._getServerData(as) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`
      {
        pathname,
        query,
        asPath: as
      })).then(props => {
        routeInfo.props = props;
        this.components[route] = routeInfo;
        return routeInfo;
      });
    }).catch(handleError);
  }

  set(route, pathname, query, as, data) {
    this.isFallback = false;
    this.route = route;
    this.pathname = pathname;
    this.query = query;
    this.asPath = as;
    return this.notify(data);
  }
  /**
  * Callback to execute before replacing router state
  * @param cb callback to be executed
  */


  beforePopState(cb) {
    this._bps = cb;
  }

  onlyAHashChange(as) {
    if (!this.asPath) return false;
    const [oldUrlNoHash, oldHash] = this.asPath.split('#');
    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same

    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
      return true;
    } // If the urls are change, there's more than a hash change


    if (oldUrlNoHash !== newUrlNoHash) {
      return false;
    } // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.


    return oldHash !== newHash;
  }

  scrollToHash(as) {
    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value

    if (hash === '') {
      window.scrollTo(0, 0);
      return;
    } // First we check if the element by id is found


    const idEl = document.getElementById(hash);

    if (idEl) {
      idEl.scrollIntoView();
      return;
    } // If there's no element with the id, we check the `name` property
    // To mirror browsers


    const nameEl = document.getElementsByName(hash)[0];

    if (nameEl) {
      nameEl.scrollIntoView();
    }
  }

  urlIsNew(asPath) {
    return this.asPath !== asPath;
  }
  /**
  * Prefetch page code, you may wait for the data during page rendering.
  * This feature only works in production!
  * @param url the href of prefetched page
  * @param asPath the as path of the prefetched page
  */


  prefetch(url, asPath = url, options = {}) {
    return new Promise((resolve, reject) => {
      const {
        pathname,
        protocol
      } = (0, _url2.parse)(url);

      if (!pathname || protocol) {
        if (true) {
          throw new Error(`Invalid href passed to router: ${url} https://err.sh/vercel/next.js/invalid-href-passed`);
        }

        return;
      } // Prefetch is not supported in development mode because it would trigger on-demand-entries


      if (true) {
        return;
      }

      const route = delBasePath(toRoute(pathname));
      Promise.all([this.pageLoader.prefetchData(url, delBasePath(asPath)), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]).then(() => resolve(), reject);
    });
  }

  async fetchComponent(route) {
    let cancelled = false;

    const cancel = this.clc = () => {
      cancelled = true;
    };

    route = delBasePath(route);
    const componentResult = await this.pageLoader.loadPage(route);

    if (cancelled) {
      const error = new Error(`Abort fetching component for route: "${route}"`);
      error.cancelled = true;
      throw error;
    }

    if (cancel === this.clc) {
      this.clc = null;
    }

    return componentResult;
  }

  _getData(fn) {
    let cancelled = false;

    const cancel = () => {
      cancelled = true;
    };

    this.clc = cancel;
    return fn().then(data => {
      if (cancel === this.clc) {
        this.clc = null;
      }

      if (cancelled) {
        const err = new Error('Loading initial props cancelled');
        err.cancelled = true;
        throw err;
      }

      return data;
    });
  }

  getInitialProps(Component, ctx) {
    const {
      Component: App
    } = this.components['/_app'];

    const AppTree = this._wrapApp(App);

    ctx.AppTree = AppTree;
    return (0, _utils.loadGetInitialProps)(App, {
      AppTree,
      Component,
      router: this,
      ctx
    });
  }

  abortComponentLoad(as) {
    if (this.clc) {
      const e = new Error('Route Cancelled');
      e.cancelled = true;
      Router.events.emit('routeChangeError', e, as);
      this.clc();
      this.clc = null;
    }
  }

  notify(data) {
    return this.sub(data, this.components['/_app'].Component);
  }

}

exports.default = Router;
Router.events = (0, _mitt.default)();

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string

const TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteMatcher = getRouteMatcher;

function getRouteMatcher(routeRegex) {
  const {
    re,
    groups
  } = routeRegex;
  return pathname => {
    const routeMatch = re.exec(pathname);

    if (!routeMatch) {
      return false;
    }

    const decode = param => {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        const err = new Error('failed to decode param');
        err.code = 'DECODE_FAILED';
        throw err;
      }
    };

    const params = {};
    Object.keys(groups).forEach(slugName => {
      const g = groups[slugName];
      const m = routeMatch[g.pos];

      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(entry => decode(entry)) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module
// to reduce bytes

function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
}

function getRouteRegex(normalizedRoute) {
  // Escape all characters that could be considered RegEx
  const escapedRoute = escapeRegex(normalizedRoute.replace(/\/$/, '') || '/');
  const groups = {};
  let groupIndex = 1;
  const parameterizedRoute = escapedRoute.replace(/\/\\\[([^/]+?)\\\](?=\/|$)/g, (_, $1) => {
    const isOptional = /^\\\[.*\\\]$/.test($1);

    if (isOptional) {
      $1 = $1.slice(2, -2);
    }

    const isCatchAll = /^(\\\.){3}/.test($1);

    if (isCatchAll) {
      $1 = $1.slice(6);
    }

    groups[$1 // Un-escape key
    .replace(/\\([|\\{}()[\]^$+*?.-])/g, '$1') // eslint-disable-next-line no-sequences
    ] = {
      pos: groupIndex++,
      repeat: isCatchAll
    };
    return isCatchAll ? isOptional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';
  });
  let namedParameterizedRoute; // dead code eliminate for browser since it's only needed
  // while generating routes-manifest

  if (true) {
    namedParameterizedRoute = escapedRoute.replace(/\/\\\[([^/]+?)\\\](?=\/|$)/g, (_, $1) => {
      const isCatchAll = /^(\\\.){3}/.test($1);
      const key = $1 // Un-escape key
      .replace(/\\([|\\{}()[\]^$+*?.-])/g, '$1').replace(/^\.{3}/, '');
      return isCatchAll ? `/(?<${escapeRegex(key)}>.+?)` : `/(?<${escapeRegex(key)}>[^/]+?)`;
    });
  }

  return {
    re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),
    groups,
    namedRegex: namedParameterizedRoute ? `^${namedParameterizedRoute}(?:/)?$` : undefined
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.execOnce = execOnce;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;
exports.getDisplayName = getDisplayName;
exports.isResSent = isResSent;
exports.loadGetInitialProps = loadGetInitialProps;
exports.formatWithValidation = formatWithValidation;
exports.ST = exports.SP = exports.urlObjectKeys = void 0;

var _url = __webpack_require__(/*! url */ "url");
/**
* Utils
*/


function execOnce(fn) {
  let used = false;
  let result;
  return (...args) => {
    if (!used) {
      used = true;
      result = fn(...args);
    }

    return result;
  };
}

function getLocationOrigin() {
  const {
    protocol,
    hostname,
    port
  } = window.location;
  return `${protocol}//${hostname}${port ? ':' + port : ''}`;
}

function getURL() {
  const {
    href
  } = window.location;
  const origin = getLocationOrigin();
  return href.substring(origin.length);
}

function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}

function isResSent(res) {
  return res.finished || res.headersSent;
}

async function loadGetInitialProps(App, ctx) {
  if (true) {
    var _App$prototype;

    if ((_App$prototype = App.prototype) === null || _App$prototype === void 0 ? void 0 : _App$prototype.getInitialProps) {
      const message = `"${getDisplayName(App)}.getInitialProps()" is defined as an instance method - visit https://err.sh/vercel/next.js/get-initial-props-as-an-instance-method for more information.`;
      throw new Error(message);
    }
  } // when called from _app `ctx` is nested in `ctx`


  const res = ctx.res || ctx.ctx && ctx.ctx.res;

  if (!App.getInitialProps) {
    if (ctx.ctx && ctx.Component) {
      // @ts-ignore pageProps default
      return {
        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
      };
    }

    return {};
  }

  const props = await App.getInitialProps(ctx);

  if (res && isResSent(res)) {
    return props;
  }

  if (!props) {
    const message = `"${getDisplayName(App)}.getInitialProps()" should resolve to an object. But found "${props}" instead.`;
    throw new Error(message);
  }

  if (true) {
    if (Object.keys(props).length === 0 && !ctx.ctx) {
      console.warn(`${getDisplayName(App)} returned an empty object from \`getInitialProps\`. This de-optimizes and prevents automatic static optimization. https://err.sh/vercel/next.js/empty-object-getInitialProps`);
    }
  }

  return props;
}

const urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
exports.urlObjectKeys = urlObjectKeys;

function formatWithValidation(url, options) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(key => {
        if (urlObjectKeys.indexOf(key) === -1) {
          console.warn(`Unknown key passed via urlObject into url.format: ${key}`);
        }
      });
    }
  }

  return (0, _url.format)(url, options);
}

const SP = typeof performance !== 'undefined';
exports.SP = SP;
const ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';
exports.ST = ST;

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client/link */ "./node_modules/next/dist/client/link.js")


/***/ }),

/***/ "./pages/tramites-en-linea/[tramitePage].js":
/*!**************************************************!*\
  !*** ./pages/tramites-en-linea/[tramitePage].js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/container */ "./components/container.js");
/* harmony import */ var _components_breadcrumb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/breadcrumb */ "./components/breadcrumb.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../config */ "./config.js");
/* harmony import */ var _components_detail__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../components/detail */ "./components/detail.js");
/* harmony import */ var _components_formalities_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../components/formalities-list */ "./components/formalities-list.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! axios */ "axios");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _components_tramites_forms_autorizacion_de_viaje__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../components/tramites-forms/autorizacion-de-viaje */ "./components/tramites-forms/autorizacion-de-viaje.js");
/* harmony import */ var _components_tramites_forms_constitucion_de_empresas__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../components/tramites-forms/constitucion-de-empresas */ "./components/tramites-forms/constitucion-de-empresas.js");
/* harmony import */ var _components_tramites_forms_poderes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../components/tramites-forms/poderes */ "./components/tramites-forms/poderes.js");
/* harmony import */ var _components_tramites_forms_transferencia_inmobiliaria__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../components/tramites-forms/transferencia-inmobiliaria */ "./components/tramites-forms/transferencia-inmobiliaria.js");
/* harmony import */ var _components_tramites_forms_transferencia_vehicular__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../components/tramites-forms/transferencia-vehicular */ "./components/tramites-forms/transferencia-vehicular.js");
var _jsxFileName = "D:\\frank-proyectos\\data\\Proyectos\\notaria-roman\\frontend\\pages\\tramites-en-linea\\[tramitePage].js";
var __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;















const TramitePage = props => {
  const {
    0: dataTramite,
    1: setDataTramite
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])([{
    titleCat: "Autorización de viaje",
    linkCat: 'autorizacion-de-viaje',
    formBody: __jsx(_components_tramites_forms_autorizacion_de_viaje__WEBPACK_IMPORTED_MODULE_9__["default"], {
      key: 1,
      width: "col-xs-12 col-md-9",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 24,
        columnNumber: 23
      }
    }),
    data: []
  }, {
    titleCat: "Constitución de empresas",
    linkCat: 'constitucion-de-empresas',
    formBody: __jsx(_components_tramites_forms_constitucion_de_empresas__WEBPACK_IMPORTED_MODULE_10__["default"], {
      key: 2,
      width: "col-xs-12 col-md-9",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 32,
        columnNumber: 23
      }
    }),
    data: []
  }, {
    titleCat: "Poderes",
    linkCat: 'poderes',
    formBody: __jsx(_components_tramites_forms_poderes__WEBPACK_IMPORTED_MODULE_11__["default"], {
      key: 2,
      width: "col-xs-12 col-md-9",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40,
        columnNumber: 23
      }
    }),
    data: []
  }, {
    titleCat: "Transferencias inmobiliarias",
    linkCat: 'transferencias-inmobiliarias',
    formBody: __jsx(_components_tramites_forms_transferencia_inmobiliaria__WEBPACK_IMPORTED_MODULE_12__["default"], {
      key: 2,
      width: "col-xs-12 col-md-9",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 23
      }
    }),
    data: []
  }, {
    titleCat: "Transferencias vehiculares",
    linkCat: 'transferencias-vehiculares',
    formBody: __jsx(_components_tramites_forms_transferencia_vehicular__WEBPACK_IMPORTED_MODULE_13__["default"], {
      key: 2,
      width: "col-xs-12 col-md-9",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 56,
        columnNumber: 23
      }
    }),
    data: []
  }]);
  const {
    0: verifyPage,
    1: setVerifyPage
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    function searchInObject(nameKey, myArray) {
      for (var i = 0; i < myArray.length; i++) {
        if (myArray[i].linkCat === nameKey) {
          return true;
        }
      }
    }

    if (props.currentUrl != 'todos') {
      let verifyCatUrl = searchInObject(props.currentUrl, dataTramite);
      setVerifyPage(verifyCatUrl);
      !verifyCatUrl && next_router__WEBPACK_IMPORTED_MODULE_2___default.a.push('/');
    }
  });
  const dataCurrent = dataTramite.filter(current => current.linkCat == props.currentUrl);

  const doNavLateral = __jsx(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, __jsx("div", {
    className: "item item-1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 87,
      columnNumber: 9
    }
  }, __jsx("h2", {
    className: "title-list-detail",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 13
    }
  }, "Tr\xE1mites en linea"), __jsx("div", {
    className: "data-list-detail",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89,
      columnNumber: 13
    }
  }, props.listTramiteShort != undefined && props.listTramiteShort.map((item, index) => {
    return __jsx(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
      key: index,
      href: item.link,
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 91,
        columnNumber: 28
      }
    }, __jsx("a", {
      className: props.currentUrl == item.link ? "active" : "",
      __self: undefined,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 92,
        columnNumber: 25
      }
    }, item.title));
  }))));

  return __jsx(_components_container__WEBPACK_IMPORTED_MODULE_3__["default"], {
    namePage: "tramites inner margins-body-type-2",
    titlePage: "Servicios",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 102,
      columnNumber: 9
    }
  }, __jsx(_components_breadcrumb__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 104,
      columnNumber: 13
    }
  }), verifyPage && __jsx(_components_detail__WEBPACK_IMPORTED_MODULE_6__["default"], {
    class: "detail-style-1 service-detail",
    dataList: doNavLateral,
    dataContent: dataCurrent[0].formBody,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 107,
      columnNumber: 17
    }
  }));
};

TramitePage.getInitialProps = async ctx => {
  const result = await axios__WEBPACK_IMPORTED_MODULE_8___default()(_config__WEBPACK_IMPORTED_MODULE_5__["default"].API_PATH + '/tramite-short'); //console.log(result.data)    

  return {
    currentUrl: ctx.query.tramitePage,
    listTramiteShort: result.data.listTramite
  };
};

/* harmony default export */ __webpack_exports__["default"] = (TramitePage);

/***/ }),

/***/ 5:
/*!********************************************************!*\
  !*** multi ./pages/tramites-en-linea/[tramitePage].js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\frank-proyectos\data\Proyectos\notaria-roman\frontend\pages\tramites-en-linea\[tramitePage].js */"./pages/tramites-en-linea/[tramitePage].js");


/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jquery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("jquery");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/router");

/***/ }),

/***/ "prop-types":
/*!*****************************!*\
  !*** external "prop-types" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),

/***/ "prop-types-exact":
/*!***********************************!*\
  !*** external "prop-types-exact" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("prop-types-exact");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-hook-form":
/*!**********************************!*\
  !*** external "react-hook-form" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-hook-form");

/***/ }),

/***/ "react-html-parser":
/*!************************************!*\
  !*** external "react-html-parser" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-html-parser");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-is");

/***/ }),

/***/ "react-slick":
/*!******************************!*\
  !*** external "react-slick" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-slick");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,